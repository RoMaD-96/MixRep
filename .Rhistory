expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03))) +
facet_wrap(~ parameter, scales = "free", labeller = label_parsed,
strip.position = "bottom") +
theme_bw() +
theme(strip.placement = "outside",   # format to look like title
strip.background = element_blank(),
strip.text.x = element_text(size = 22),
legend.position = "top",
axis.text.y = element_text(size = 18),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 18),
axis.title.x = element_text(size = 22),
legend.title= element_blank(),
legend.text = element_text(size = 18)) +
guides(color=guide_legend(title="Replicated Experiment"))
print(plot_marg_post_joint)
ggsave(filename = "plot_marg_post_joint.pdf",path = "Plots", plot = plot_marg_post_joint,
width = 17, height = 7.5, device='pdf', dpi=500, useDingbats = FALSE)
# Create a data frame
data <- data.frame(
group = c("Original", "Replication 1", "Replication 2", "Replication 3", "Pooled Replication"),
estimate = c(to, tr[1], tr[2], tr[3], tr[4]),
ymin = c(ci_o[1], ci_r1[1], ci_r2[1], ci_r3[1], ci_r4[1]),
ymax = c(ci_o[2], ci_r1[2], ci_r2[2], ci_r3[2], ci_r4[2]),
color = c("#8A0404", "#E69F00", "#009E20", "#0072B2", "tomato")
)
plot_theta <- ggplot(data) +
geom_point(aes(x = group, y = estimate, color = group), shape = 16, fill = "white", size = 4.5) +
geom_errorbar(aes(x = group, ymin = ymin, ymax = ymax, color = group), width = 0.15, size = 1.8) +
scale_color_manual(values = data$color) +
labs(
y = "Effect Size Estimate",
x = "Study") +
scale_color_manual(
values = c("Original" = "#8A0404" ,"Replication 1" = "#E69F00", "Replication 2" = "#009E20", "Replication 3" = "#0072B2",
"Pooled Replication" = "#AA4499"),
labels = c(expression(" "~hat(theta)[o] == 0.21 ~ ", " ~ sigma[o] == 0.05),
expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03))) +
theme_bw() +
theme(
# axis.title.x = element_blank(),
# axis.text.x = element_blank(),
# axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank(),
legend.position = "top",
legend.title = element_blank(),
axis.text.y = element_text(size = 18),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 18),
axis.title.x = element_text(size = 22),
legend.text = element_text(size = 18)
)
# pdf("ggplot.pdf", pointsize=100, width=20, height=10)
print(plot_theta)
library(dplyr)
library(knitr)
library(xtable)
library(repmix)
source("Scripts/RepMixFun_BF.R")
# Original and Replicated Studies
to <- 0.21
so <- 0.05
trep <- c(0.09, 0.21, 0.44)
srep <- c(0.05, 0.06, 0.04)
tp <- round(sum(trep/srep^2)/sum(1/srep^2),2)
sp <- round(sqrt(1/sum(1/srep^2)),2)
tr <- c(trep,tp)
sr <- c(srep,sp)
# Mean and Variance Unit Informative Prior
mu_UIP <- 0
tau_UIP <- 2
# Parameter Grid
n_weights <- 300
n_theta <- 300
wseq <- seq(0, 1, length.out = n_weights)
thetaseq <- seq(-0.2, 0.6, length.out = 2500)
par_grid <- expand.grid(omega = wseq, theta = thetaseq)
# Uniform Prior for the Weight
eta <- 1
nu <- 1
# Replication Number
rep_number <- c(1,2,3,4)
postdens <- posteriormix(theta = par_grid$theta, w = par_grid$omega, tr = tr[1], sr = sr[1],
to = to, so = so, x = eta, y = nu, m = mu_UIP, v = tau_UIP)
postdens_wrapper <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
post_dens <- posteriormix(
theta = par_grid$theta,
w = par_grid$omega,
tr = tr[index],
sr = sr[index],
to = to,
so = so,
x = eta,
y = nu,
m = mu_UIP,
v = tau_UIP
)
par_grid$tr <- tr[index]
par_grid$sr <- sr[index]
par_grid$rep_number <- index
par_grid$density <- post_dens
return(par_grid)
}))
weights_m_post <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
marg_p_dens <- wposteriormix(w = wseq,
tr = tr[index],
sr = sr[index],
to = to,
so = so,
x = eta,
y = nu,
m = mu_UIP,
v = tau_UIP
)
out <- data.frame(x = wseq, density = marg_p_dens, rep_number = rep_number[index],
parameter = "'Weight parameter' ~ omega", tr = tr[index], sr = sr[index])
return(out)
}))
HPDI_weights <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpdi <- wHPD(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, m = mu_UIP, v = tau_UIP, x = eta, y = nu)
out <- data.frame(y = max(weights_m_post$density)*(1 + 0.05*i),
lower = hpdi[1], upper = hpdi[3], rep_number = rep_number[i],
parameter = "'Weight parameter' ~ omega", tr = tr[i],
sr = sr[i], height = 0.2)
return(out)
}))
theta_m_post <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
marg_p_dens <- thetaposteriormix(  theta = thetaseq,
tr = tr[index],
sr = sr[index],
to = to,
so = so,
x = eta,
y = nu,
m = mu_UIP,
v = tau_UIP
)
out <- data.frame(x = thetaseq, density = marg_p_dens, rep_number = rep_number[index],
parameter = "'Effect size' ~ theta", tr = tr[index], sr = sr[index])
return(out)
}))
## Posterior of effect size without using original data
theta_m_post_2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pDens <- dnorm(x = thetaseq, mean = tr[i], sd = sr[i])
out <- data.frame(x = thetaseq, density = pDens, rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i], sr = sr[i])
return(out)
}))
HPDI_theta <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- thetaHPD(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, m = mu_UIP, v = tau_UIP, x = eta, y = nu)
out <- data.frame(y = max(c(theta_m_post_2$density, theta_m_post$density))*(1 + 0.06*i),
lower = hpd[1], upper = hpd[3], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
HPDI_theta_2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- tr[i] + c(-1, 1)*qnorm(p = 0.975)*sr[i]
out <- data.frame(y = max(c(theta_m_post_2$density, theta_m_post$density))*(1 + 0.05*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
HPDI_theta_2$trFormat <- paste0("{hat(theta)[italic('r')*", HPDI_theta_2$rnumber, "] == ",
round(HPDI_theta_2$tr, 2), "}*',' ~ sigma[italic('r')*",
HPDI_theta_2$rnumber, "] == ", round(HPDI_theta_2$sr, 2))
format_bf <- function(BF, digits = "default") {
## check inputs
stopifnot(
length(BF) == 1,
is.numeric(BF),
(is.finite(BF) && 0 < BF) || is.na(BF),
length(digits) == 1,
(is.character(digits) && digits == "default") ||
(is.numeric(digits) && 0 <= digits)
)
## return NA if input NA/NaN
if (is.na(BF) || is.nan(BF))
result <- NA
else {
## format BF
if (digits == "default") {
if (BF < 1/1000)
result <- "< 1/1000"
if ((BF >= 1/1000) & (BF <= 1/10))
result <- paste0("1/", as.character(round(1/BF)))
if ((BF > 1/10) & (BF < 1))
result <- paste0("1/", as.character(round(1/BF, digits = 1)))
if ((BF < 10) & (BF >= 1))
result <- as.character(round(BF, digits = 1))
if ((BF >= 10) & (BF <= 1000))
result <- as.character(round(BF))
if (BF > 1000)
result <- "> 1000"
} else {
if (BF < 1)
result <- paste0("1/", as.character(round(1/BF, digits = digits)))
else
result <- as.character(round(BF, digits = digits))
}
## when 1/1 return 1
if (result == "1/1") result <- "1"
}
return(result)
}
format_bf_vec <- Vectorize(FUN = format_bf)
rnumber <- c(1, 2, 3, 4)
bf_df <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
bf_theta_random <- bf_theta_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 1, y = 1, m = mu_UIP, v = tau_UIP)
bf_theta <- bf_theta_mix(tr = tr[i], sr = sr[i], to = to, so = so, x = 1, y = 1,
m = mu_UIP, v = tau_UIP, w = 1)
bf_omega <- bf_omega_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 1, y = 1, m = mu_UIP, v = tau_UIP, w_null = 0, w_alt = 1)
bf_random_omega_1 <- bf_omega_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 1, y = 2, m = mu_UIP, v = tau_UIP, w_null = NA, w_alt = NA)
bf_random_omega_2 <- bf_omega_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 2, y = 1, m = mu_UIP, v = tau_UIP, w_null = NA, w_alt = NA)
out <- data.frame(number = rnumber[i], tr = tr[i], sr = sr[i], bf_theta = bf_theta,
bf_theta_random = bf_theta_random, bf_omega = bf_omega,
bf_random_omega_1 = bf_random_omega_1, bf_random_omega_2 = bf_random_omega_2)
return(out)
}))
## Create LaTeX table for theta
dfTab_theta <- bf_df[,1:5] %>%
mutate(bf_theta = format_bf_vec(bf_theta),
bf_theta_random = format_bf_vec(bf_theta_random),
tr = round(tr, 2),
sr = round(sr, 2),
number = as.integer(number)) %>%
arrange(tr)
bf_df
## Create LaTeX table for theta
dfTab_theta <- bf_df[,1:5] %>%
mutate(bf_theta = format_bf_vec(bf_theta),
bf_theta_random = format_bf_vec(bf_theta_random),
tr = round(tr, 2),
sr = round(sr, 2),
number = as.integer(number)) %>%
arrange(number)
xtab_theta <- xtable(dfTab_theta)
colnames(xtab_theta) <- c("",
"$\\hat{\\theta}_r$",
"$\\sigma_r$",
paste0("$\\mathrm{BF}_{01}\\{\\hat{\\theta}_r \\mid \\mathcal{H}_{1} \\: \\omega \\sim \\mathrm{Beta}(",
eta, ", ", nu, ")\\}$"),
"$\\BF_{01}(\\hat{\\theta}_r \\mid \\mathcal{h}_{1} \\: \\alpha = 1)$"
)
align(xtab_theta) <- rep("c", length(colnames(xtab_theta)) + 1)
## add multicolumns for effet size test and power parameter test
addtorow <- list()
addtorow$pos <- list(-1)
addtorow$command <- '\\toprule'
print(xtab_theta, floating = FALSE, include.rownames = FALSE, add.to.row = addtorow,
sanitize.text.function = function(x){x}, booktabs = TRUE, hline.after = c(0, nrow(xtab_theta)))
bf_df
print(xtab_theta, floating = FALSE, include.rownames = FALSE, add.to.row = addtorow,
sanitize.text.function = function(x){x}, booktabs = TRUE, hline.after = c(0, nrow(xtab_theta)))
## Create LaTeX table for omega
dfTab_omega <- bf_df[,c(1:3,6:8)] %>%
mutate(bf_omega = format_bf_vec(bf_omega),
bf_random_omega_1 = format_bf_vec(bf_random_omega_1),
bf_random_omega_2 = format_bf_vec(bf_random_omega_2),
tr = round(tr, 2),
sr = round(sr, 2),
number = as.integer(number)) %>%
arrange(tr)
bf_df
bf_df
## Create LaTeX table for omega
dfTab_omega <- bf_df[,c(1:3,6:8)] %>%
mutate(bf_omega = format_bf_vec(bf_omega),
bf_random_omega_1 = format_bf_vec(bf_random_omega_1),
bf_random_omega_2 = format_bf_vec(bf_random_omega_2),
tr = round(tr, 2),
sr = round(sr, 2),
number = as.integer(number)) %>%
arrange(tr)
xtab_omega <- xtable(dfTab_omega)
colnames(xtab_omega) <- c("",
"$\\hat{\\theta}_r$",
"$\\sigma_r$",
paste0("$\\mathrm{BF}_{\\text{dc}}(\\hat{\\theta}_r \\mid \\mathcal{H}_d \\: \\omega = ",
0, ")$"),
paste0("$\\mathrm{BF}_{\\text{dc}}\\{\\hat{\\theta}_r \\mid \\mathcal{H}_d \\: \\omega \\sim \\mathrm{Beta}(",
1, ", ", 2, ")\\}$"),
paste0("$\\mathrm{BF}_{\\text{dc}}\\{\\hat{\\theta}_r \\mid \\mathcal{H}_d \\: \\omega \\sim \\mathrm{Beta}(",
2, ", ", 1, ")\\}$")
)
align(xtab_omega) <- rep("c", length(colnames(xtab_omega)) + 1)
## add multicolumns for effet size test and power parameter test
addtorow <- list()
addtorow$pos <- list(-1)
addtorow$command <- '\\toprule'
print(xtab_omega, floating = FALSE, include.rownames = FALSE, add.to.row = addtorow,
sanitize.text.function = function(x){x}, booktabs = TRUE, hline.after = c(0, nrow(xtab_omega)))
## Create LaTeX table for omega
dfTab_omega <- bf_df[,c(1:3,6:8)] %>%
mutate(bf_omega = format_bf_vec(bf_omega),
bf_random_omega_1 = format_bf_vec(bf_random_omega_1),
bf_random_omega_2 = format_bf_vec(bf_random_omega_2),
tr = round(tr, 2),
sr = round(sr, 2),
number = as.integer(number)) %>%
arrange(number)
xtab_omega <- xtable(dfTab_omega)
colnames(xtab_omega) <- c("",
"$\\hat{\\theta}_r$",
"$\\sigma_r$",
paste0("$\\mathrm{BF}_{\\text{dc}}(\\hat{\\theta}_r \\mid \\mathcal{H}_d \\: \\omega = ",
0, ")$"),
paste0("$\\mathrm{BF}_{\\text{dc}}\\{\\hat{\\theta}_r \\mid \\mathcal{H}_d \\: \\omega \\sim \\mathrm{Beta}(",
1, ", ", 2, ")\\}$"),
paste0("$\\mathrm{BF}_{\\text{dc}}\\{\\hat{\\theta}_r \\mid \\mathcal{H}_d \\: \\omega \\sim \\mathrm{Beta}(",
2, ", ", 1, ")\\}$")
)
align(xtab_omega) <- rep("c", length(colnames(xtab_omega)) + 1)
## add multicolumns for effet size test and power parameter test
addtorow <- list()
addtorow$pos <- list(-1)
addtorow$command <- '\\toprule'
print(xtab_omega, floating = FALSE, include.rownames = FALSE, add.to.row = addtorow,
sanitize.text.function = function(x){x}, booktabs = TRUE, hline.after = c(0, nrow(xtab_omega)))
length(tr)
bf_theta <- bf_theta_mix(tr = tr[4], sr = sr[4], to = to, so = so, x = 1, y = 1,
m = mu_UIP, v = tau_UIP, w = 1)
bf_theta
bf_theta <- bf_theta_mix(tr = tr[2], sr = sr[2], to = to, so = so, x = 1, y = 1,
m = mu_UIP, v = tau_UIP, w = 1)
bf_theta
bf_theta <- bf_theta_mix(tr = tr[4], sr = 0.04, to = to, so = so, x = 1, y = 1,
m = mu_UIP, v = tau_UIP, w = 1)
bf_theta
bf_theta <- bf_theta_mix(tr = tr[4], sr = 0.06, to = to, so = so, x = 1, y = 1,
m = mu_UIP, v = tau_UIP, w = 1)
bf_theta
1/(0.05^2)+1/(0.06^2)+1/(0.04^2)
1/1302.778
sqrt( 0.0007675905)
0.09/(0.05^2)+0.21/(0.06^2)+0.44/(0.04^2)
369.3333/1302.778
library(ggplot2)
library(ggpubr)
library(colorspace)
library(spatstat)
library(repmix)
source("Scripts/RepMixFun_BF.R")
# Original and Replicated Studies
to <- 0.21
so <- 0.05
trep <- c(0.09, 0.21, 0.44)
srep <- c(0.05, 0.06, 0.04)
tp <- round(sum(trep/srep^2)/sum(1/srep^2),2)
sp <- round(sqrt(1/sum(1/srep^2)),2)
tr <- c(trep,tp)
sr <- c(srep,sp)
# Mean and Variance Unit Informative Prior
mu_UIP <- 0
tau_UIP <- 2
# Parameter Grid
n_weights <- 300
n_theta <- 300
wseq <- seq(0.6, 1, by = 0.1)
thetaseq <- seq(-0.2, 0.6, length.out = 2500)
par_grid <- expand.grid(omega = wseq, theta = thetaseq)
cols <- hcl.colors(n = length(wseq), palette = "viridis", alpha = 0.9, rev = TRUE)
# Now let's create a data frame for ggplot
densities <- list()
for (i in 1:length(tr)) {
densities[[i]] <- sapply(X = wseq, FUN = function(w) {
thetaposteriormix(theta = thetaseq, tr = tr[i], sr = sr[i], to = to, so = so,
m = mu_UIP, v = tau_UIP, w = w)
})
}
df <- list()
additional_lines <- list()
for (i in 1:length(tr)) {
# Turn the results into a data frame
df[[i]] <- data.frame(theta = rep(thetaseq, times = length(wseq)),
density = as.vector(densities[[i]]),
w = factor(rep(wseq, each = length(thetaseq))))
# Add the additional lines
df[[i]]$likelihood <- dnorm(x = df[[i]]$theta, mean = tr[i], sd = sr[i])
df[[i]]$prior_original <- dnorm(x = df[[i]]$theta, mean = to, sd = so)
df[[i]]$prior_robust <- dnorm(x = df[[i]]$theta, mean = mu_UIP, sd = sqrt(tau_UIP))
df[[i]]$replication <- paste0( "Replication ", i)
# Create a separate data frame for the additional lines to help in creating the legend
additional_lines[[i]] <- data.frame(
theta = rep(thetaseq, 3),
value = c(dnorm(x = thetaseq, mean = tr[i], sd = sr[i]),
dnorm(x = thetaseq, mean = to, sd = so),
dnorm(x = thetaseq, mean = mu_UIP, sd = sqrt(tau_UIP))),
replication = paste0( "Replication ", i),
linetype = factor(rep(c("Likelihood", "Non-Informative Prior", "Prior Original"), each = length(thetaseq)))
)
}
df_densities <- do.call(rbind, df)
df_additional_lines <- do.call(rbind, additional_lines)
df_densities$replication <- factor(df_densities$replication,
levels = c("Replication 1", "Replication 2", "Replication 3", "Replication 4"),
labels = c(expression(" "~hat(theta)[r * 1] == 0.09 ~ ", " ~ sigma[r * 1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03)))
df_additional_lines$replication <- factor(df_additional_lines$replication,
levels = c("Replication 1", "Replication 2", "Replication 3", "Replication 4"),
labels = c(expression(" "~hat(theta)[r * 1] == 0.09 ~ ", " ~ sigma[r * 1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03)))
# The ggplot
plot_post_fix <- ggplot() +
geom_line(data = df_densities, aes(x = theta, y = density, color = w), size = 1) +
geom_line(data = df_additional_lines, aes(x = theta, y = value, linetype = linetype), size = 0.8) +
scale_color_manual(values = cols) +
scale_linetype_manual(values = c("dashed", "dotted", "dotdash"),
labels = c("Likelihood (Replication)", "Prior (Original component)", "Prior (Non-Informative component)")) +
labs(x = expression("Effect Size" ~ theta), y = "Density") +
theme_bw() +
guides(linetype = guide_legend(title = "Density: ", position = "top"),
color = guide_legend(title = "Weight: ", position = "left")
) +
facet_wrap(~ replication, labeller = label_parsed, ncol = 4) +
scale_x_continuous(limits=c(-0.10, 0.6)) +
theme(
strip.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 18),
axis.title.x = element_text(size = 22),
legend.text = element_text(size = 18),
legend.title = element_text(size = 19))
plot_post_fix
wseq <- seq(0.0, 1, by = 0.1)
thetaseq <- seq(-0.2, 0.6, length.out = 2500)
par_grid <- expand.grid(omega = wseq, theta = thetaseq)
cols <- hcl.colors(n = length(wseq), palette = "viridis", alpha = 0.9, rev = TRUE)
# Now let's create a data frame for ggplot
densities <- list()
for (i in 1:length(tr)) {
densities[[i]] <- sapply(X = wseq, FUN = function(w) {
thetaposteriormix(theta = thetaseq, tr = tr[i], sr = sr[i], to = to, so = so,
m = mu_UIP, v = tau_UIP, w = w)
})
}
df <- list()
additional_lines <- list()
for (i in 1:length(tr)) {
# Turn the results into a data frame
df[[i]] <- data.frame(theta = rep(thetaseq, times = length(wseq)),
density = as.vector(densities[[i]]),
w = factor(rep(wseq, each = length(thetaseq))))
# Add the additional lines
df[[i]]$likelihood <- dnorm(x = df[[i]]$theta, mean = tr[i], sd = sr[i])
df[[i]]$prior_original <- dnorm(x = df[[i]]$theta, mean = to, sd = so)
df[[i]]$prior_robust <- dnorm(x = df[[i]]$theta, mean = mu_UIP, sd = sqrt(tau_UIP))
df[[i]]$replication <- paste0( "Replication ", i)
# Create a separate data frame for the additional lines to help in creating the legend
additional_lines[[i]] <- data.frame(
theta = rep(thetaseq, 3),
value = c(dnorm(x = thetaseq, mean = tr[i], sd = sr[i]),
dnorm(x = thetaseq, mean = to, sd = so),
dnorm(x = thetaseq, mean = mu_UIP, sd = sqrt(tau_UIP))),
replication = paste0( "Replication ", i),
linetype = factor(rep(c("Likelihood", "Non-Informative Prior", "Prior Original"), each = length(thetaseq)))
)
}
df_densities <- do.call(rbind, df)
df_additional_lines <- do.call(rbind, additional_lines)
df_densities$replication <- factor(df_densities$replication,
levels = c("Replication 1", "Replication 2", "Replication 3", "Replication 4"),
labels = c(expression(" "~hat(theta)[r * 1] == 0.09 ~ ", " ~ sigma[r * 1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03)))
df_additional_lines$replication <- factor(df_additional_lines$replication,
levels = c("Replication 1", "Replication 2", "Replication 3", "Replication 4"),
labels = c(expression(" "~hat(theta)[r * 1] == 0.09 ~ ", " ~ sigma[r * 1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03)))
# The ggplot
plot_post_fix <- ggplot() +
geom_line(data = df_densities, aes(x = theta, y = density, color = w), size = 1) +
geom_line(data = df_additional_lines, aes(x = theta, y = value, linetype = linetype), size = 0.8) +
scale_color_manual(values = cols) +
scale_linetype_manual(values = c("dashed", "dotted", "dotdash"),
labels = c("Likelihood (Replication)", "Prior (Original component)", "Prior (Non-Informative component)")) +
labs(x = expression("Effect Size" ~ theta), y = "Density") +
theme_bw() +
guides(linetype = guide_legend(title = "Density: ", position = "top"),
color = guide_legend(title = "Weight: ", position = "left")
) +
facet_wrap(~ replication, labeller = label_parsed, ncol = 4) +
scale_x_continuous(limits=c(-0.10, 0.6)) +
theme(
strip.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 18),
axis.title.x = element_text(size = 22),
legend.text = element_text(size = 18),
legend.title = element_text(size = 19))
plot_post_fix
