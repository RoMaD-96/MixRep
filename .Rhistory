}
HPDI_weights <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpdi <- HPDI_post_m_weights(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(weights_m_post$density)*(1 + 0.05*i),
lower = hpdi[1], upper = hpdi[2], rep_number = rep_number[i],
parameter = "'Weight Parameter' ~ omega", tr = tr[i],
sr = sr[i], height = 0.2)
return(out)
}))
HPDI_weights <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpdi <- HPDI_post_m_weights( w = w, level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(weights_m_post$density)*(1 + 0.05*i),
lower = hpdi[1], upper = hpdi[2], rep_number = rep_number[i],
parameter = "'Weight Parameter' ~ omega", tr = tr[i],
sr = sr[i], height = 0.2)
return(out)
}))
HPDI_weights <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpdi <- HPDI_post_m_weights( w = wseq, level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(weights_m_post$density)*(1 + 0.05*i),
lower = hpdi[1], upper = hpdi[2], rep_number = rep_number[i],
parameter = "'Weight Parameter' ~ omega", tr = tr[i],
sr = sr[i], height = 0.2)
return(out)
}))
HPDI_weights <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpdi <- HPDI_post_m_weights( w = wseq, level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(weights_m_post$density)*(1 + 0.05*i),
lower = hpdi[1], upper = hpdi[2], rep_number = rep_number[i],
parameter = "'Weight Parameter' ~ omega", tr = tr[i],
sr = sr[i], height = 0.2)
return(out)
}))
HPDI_post_m_weights <- function(tr, sr, to, so, x, y, null, priorsd, level = 0.95) {
# Posterior Quantile Function
quantile_fun <- function(k) {
if (k == 0) {
res <- 0
} else if (k == 1) {
res <- 1
} else {
m_dens_fun <- function(w) {
m_post_weights(w = w, tr = tr, sr = sr, to = to, so = so,
x = x, y = y, null = null, priorsd = priorsd)
}
root_fun <- function(x) {
integrate(f = m_dens_fun, lower = 0, upper = x)$value - k
}
res <- uniroot(f = root_fun, interval = c(0, 1))$root
}
return(res)
}
## find narrowest interval
opt_fun_scalar <- function(qLow) {
width <- quantile_fun(k = qLow + level) - quantile_fun(k = qLow)
return(width)
}
opt_fun_vec <- Vectorize(FUN = opt_fun_scalar)
minLower <- try(optim(par = (1 - level)/2, fn = opt_fun_vec,
method = "L-BFGS-B", lower = 0,
upper = 1 - level)$par)
if (inherits(minLower, "try-error")) {
CI <- c("lower" = NaN, "upper" = NaN)
} else {
CI <- c("lower" = quantile_fun(k = minLower),
"upper" = quantile_fun(k = minLower + level))
}
return(CI)
}
HPDI_weights <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpdi <- HPDI_post_m_weights(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(weights_m_post$density)*(1 + 0.05*i),
lower = hpdi[1], upper = hpdi[2], rep_number = rep_number[i],
parameter = "'Weight Parameter' ~ omega", tr = tr[i],
sr = sr[i], height = 0.2)
return(out)
}))
HPDI_weights$trFormat <- paste0("{hat(theta)[italic('r')*", HPDI_weights$rep_number, "] == ",
round(HPDI_weights$tr, 2), "}*',' ~ sigma[italic('r')*",
HPDI_weights$rep_number, "] == ", round(HPDI_weights$sr, 2))
print(plot_weights_m_hpd)
plot_weights_m_hpd <- ggplot() +
geom_errorbarh(data = HPDI_weights,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.8, size = 1.2) +
geom_line(data=weights_m_post, aes(x=x, y=density, group=rep_exp, color=factor(rep_exp)),
lty = 1, alpha = 0.5, size = 1.2) +
scale_color_manual(
values = c("1" = "#E69F00", "2" = "#009E20", "3" = "#0072B2"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.04),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04))) +
labs(
subtitle = "Marginal Posterior Densities of Weight Parameter",
x = expression(omega~" Values"),
y = "Density"
) +
theme_minimal() +
guides(color=guide_legend(title="Replicated Experiment"))
print(plot_weights_m_hpd)
plot_weights_m_hpd <- ggplot() +
geom_errorbarh(data = HPDI_weights,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.8, size = 1.2) +
geom_line(data=weights_m_post, aes(x=x, y=density, group=rep_exp, color=factor(rep_exp)),
lty = 1, alpha = 0.9, size = 1.2) +
scale_color_manual(
values = c("1" = "#E69F00", "2" = "#009E20", "3" = "#0072B2"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.04),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04))) +
labs(
subtitle = "Marginal Posterior Densities of Weight Parameter",
x = expression(omega~" Values"),
y = "Density"
) +
theme_minimal() +
guides(color=guide_legend(title="Replicated Experiment"))
print(plot_weights_m_hpd)
HPDI_post_m_weights <- function(tr, sr, to, so, x, y, null, priorsd, level = 0.95) {
# Posterior Quantile Function
quantile_fun <- function(k) {
if (k == 0) {
res <- 0
} else if (k == 1) {
res <- 1
} else {
m_dens_fun <- function(w) {
m_post_weights(w = w, tr = tr, sr = sr, to = to, so = so,
x = x, y = y, null = null, priorsd = priorsd)
}
root_fun <- function(x) {
integrate(f = m_dens_fun, lower = 0, upper = x)$value - k
}
res <- uniroot(f = root_fun, interval = c(0, 1))$root
}
return(res)
}
# Smallest HPDI
opt_fun_scalar <- function(lower_q) {
width <- quantile_fun(k = lower_q + level) - quantile_fun(k = lower_q)
return(width)
}
opt_fun_vec <- Vectorize(FUN = opt_fun_scalar)
opt_min_lower <- try(optim(par = (1 - level)/2, fn = opt_fun_vec,
method = "L-BFGS-B", lower = 0,
upper = 1 - level)$par)
if (inherits(opt_min_lower, "try-error")) {
CI <- c("lower" = NaN, "upper" = NaN)
} else {
CI <- c("lower" = quantile_fun(k = opt_min_lower),
"upper" = quantile_fun(k = opt_min_lower + level))
}
return(CI)
}
HPDI_weights <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpdi <- HPDI_post_m_weights(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(weights_m_post$density)*(1 + 0.05*i),
lower = hpdi[1], upper = hpdi[2], rep_number = rep_number[i],
parameter = "'Weight Parameter' ~ omega", tr = tr[i],
sr = sr[i], height = 0.2)
return(out)
}))
plot_weights_m_hpd <- ggplot() +
geom_errorbarh(data = HPDI_weights,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.8, size = 1.2) +
geom_line(data=weights_m_post, aes(x=x, y=density, group=rep_exp, color=factor(rep_exp)),
lty = 1, alpha = 0.9, size = 1.2) +
scale_color_manual(
values = c("1" = "#E69F00", "2" = "#009E20", "3" = "#0072B2"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.04),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04))) +
labs(
subtitle = "Marginal Posterior Densities of Weight Parameter",
x = expression(omega~" Values"),
y = "Density"
) +
theme_minimal() +
guides(color=guide_legend(title="Replicated Experiment"))
print(plot_weights_m_hpd)
library(ggplot2)
library(ggpubr)
library(colorspace)
source("RepMixFun.R")
# Original and Replicated Studies
to <- 0.21
so <- 0.05
tr <- c(0.09, 0.21, 0.44)
sr <- c(0.045, 0.06, 0.04)
null <- 0
priorsd <- 2
# Parameter Grid
n_weights <- 300
n_theta <- 300
wseq <- seq(0, 1, length.out = n_weights)
thetaseq <- seq(-0.2, 0.6, length.out = n_theta)
par_grid <- expand.grid(omega = wseq, theta = thetaseq)
# Uniform Prior
alpha <- 1
beta <- 1
# Replication Number
rep_number <- c(1,2,3)
postdens <- rmapPost(theta = par_grid$theta, w = par_grid$omega, tr = tr[1], sr = sr[1], to = to, so = so,
null = null, priorsd = priorsd, x = alpha, y = beta)
postdens_wrapper <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
post_dens <- rmapPost(
theta = par_grid$theta,
w = par_grid$omega,
tr = tr[index],
sr = sr[index],
to = to,
so = so,
null = null,
priorsd = priorsd,
x = alpha,
y = beta
)
par_grid$tr <- tr[index]
par_grid$sr <- sr[index]
par_grid$rep_number <- index
par_grid$density <- post_dens
return(par_grid)
}))
postdens_wrapper$rep_setting <-paste0( "{hat(theta)[italic('r')*",
postdens_wrapper$rep_number,
"] == ",
round(postdens_wrapper$tr, 2),
"}*',' ~ sigma[italic('r')*",
postdens_wrapper$rep_number,
"] == ",
round(postdens_wrapper$sr, 2)
)
plot_joint <- ggplot(data = postdens_wrapper, aes(x = theta, y = omega, fill = density)) +
facet_wrap(~ rep_setting, labeller = label_parsed) +
geom_raster(interpolate = TRUE) +
geom_contour(aes(z = density), breaks = seq(0, 24, 3),  alpha = 0.35, size = 0.5) +
scale_fill_continuous_sequential(palette = "Blues 3", rev = TRUE) +
labs(
subtitle = "Contour Plot considering three replications scenario",
x = bquote("Effect Size" ~ theta),
y = bquote("Weight Parameter" ~ omega),
fill = "Posterior \n Density"
) +
guides(fill = guide_colorbar(barheight = 12, barwidth = 0.9, title.position = "top")) +
theme_minimal()
print(plot_joint)
weights_m_post <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
marg_p_dens <- m_post_weights(w = wseq,
tr = tr[index],
sr = sr[index],
to = to,
so = so,
null = null,
priorsd = priorsd,
x = alpha,
y = beta
)
out <- data.frame(x = wseq, density = marg_p_dens, rep_exp = rep_number[index],
parameter = "'Weight parameter' ~ omega", tr = tr[index], sr = sr[index])
return(out)
}))
HPDI_weights <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpdi <- HPDI_post_m_weights(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(weights_m_post$density)*(1 + 0.05*i),
lower = hpdi[1], upper = hpdi[2], rep_number = rep_number[i],
parameter = "'Weight Parameter' ~ omega", tr = tr[i],
sr = sr[i], height = 0.2)
return(out)
}))
plot_weights_m_hpd <- ggplot() +
geom_errorbarh(data = HPDI_weights,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.8, size = 1.2) +
geom_line(data=weights_m_post, aes(x=x, y=density, group=rep_exp, color=factor(rep_exp)),
lty = 1, alpha = 0.9, size = 1.2) +
scale_color_manual(
values = c("1" = "#E69F00", "2" = "#009E20", "3" = "#0072B2"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.04),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04))) +
labs(
subtitle = "Marginal Posterior Densities of Weight Parameter",
x = expression(omega~" Values"),
y = "Density"
) +
theme_minimal() +
guides(color=guide_legend(title="Replicated Experiment"))
print(plot_weights_m_hpd)
## Posterior of effect size without using original data
thetaplotDF2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pDens <- dnorm(x = thetaseq, mean = tr[i], sd = sr[i])
out <- data.frame(x = thetaseq, density = pDens, rnumber = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i], sr = sr[i])
return(out)
}))
thetaHPD <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- postPPthetaHPD(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(c(thetaplotDF2$density, theta_m_post$density))*(1 + 0.06*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
theta2HPD$trFormat <- paste0("{hat(theta)[italic('r')*", theta2HPD$rnumber, "] == ",
round(theta2HPD$tr, 2), "}*',' ~ sigma[italic('r')*",
theta2HPD$rnumber, "] == ", round(theta2HPD$sr, 2))
thetaHPD <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- postPPthetaHPD(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(c(thetaplotDF2$density, m_post_theta$density))*(1 + 0.06*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
theta2HPD <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- tr[i] + c(-1, 1)*qnorm(p = 0.975)*sr[i]
out <- data.frame(y = max(c(thetaplotDF2$density, m_post_theta$density))*(1 + 0.05*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
thetaHPD <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- postPPthetaHPD(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(c(thetaplotDF2$density, m_post_theta$density))*(1 + 0.06*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
theta_m_post <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
marg_p_dens <- m_post_theta(  theta = thetaseq,
tr = tr[index],
sr = sr[index],
to = to,
so = so,
null = null,
priorsd = priorsd,
x = alpha,
y = beta
)
out <- data.frame(x = thetaseq, density = marg_p_dens, rep_exp = rep_number[index],
parameter = "'Effect parameter' ~ theta", tr = tr[index], sr = sr[index])
return(out)
}))
thetaHPD <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- postPPthetaHPD(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(c(thetaplotDF2$density, theta_m_post$density))*(1 + 0.06*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
theta2HPD <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- tr[i] + c(-1, 1)*qnorm(p = 0.975)*sr[i]
out <- data.frame(y = max(c(thetaplotDF2$density, theta_m_post$density))*(1 + 0.05*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
plot_m_theta <- ggplot() +
geom_errorbarh(data = thetaHPD,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rnumber),
height = height), alpha = 0.8, size = 1.0) +
geom_errorbarh(data = theta2HPD,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rnumber),
height = height), alpha = 0.7, linetype = "22", size = 1.0) +
geom_line(data = thetaplotDF2, aes(x = x, y = density, color = factor(rnumber)),
lty = 2, alpha = 0.5, size = 1.0) +
geom_line(data = theta_m_post, aes(x = x, y = density, color = factor(rep_exp)),
alpha = 0.9, size = 1.0) +
scale_color_manual(
values = c("1" = "#E69F00", "2" = "#009E20", "3" = "#0072B2"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.04),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04))) +
labs(
subtitle = "Marginal Posterior Densities of Effect Parameter",
x = expression(theta~" Values"),
y = "Density"
) +
theme_minimal() +
guides(color=guide_legend(title="Replicated Experiment"))
print(plot_m_theta)
plot_m_theta <- ggplot() +
geom_errorbarh(data = thetaHPD,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.8, size = 1.0) +
geom_errorbarh(data = theta2HPD,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.7, linetype = "22", size = 1.0) +
geom_line(data = thetaplotDF2, aes(x = x, y = density, color = factor(rep_number)),
lty = 2, alpha = 0.5, size = 1.0) +
geom_line(data = theta_m_post, aes(x = x, y = density, color = factor(rep_exp)),
alpha = 0.9, size = 1.0) +
scale_color_manual(
values = c("1" = "#E69F00", "2" = "#009E20", "3" = "#0072B2"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.04),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04))) +
labs(
subtitle = "Marginal Posterior Densities of Effect Parameter",
x = expression(theta~" Values"),
y = "Density"
) +
theme_minimal() +
guides(color=guide_legend(title="Replicated Experiment"))
print(plot_m_theta)
plot_m_theta <- ggplot() +
geom_errorbarh(data = thetaHPD,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.8, size = 1.0) +
geom_errorbarh(data = theta2HPD,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.7, linetype = "22", size = 1.0) +
geom_line(data = thetaplotDF2, aes(x = x, y = density, color = factor(rep_number)),
lty = 2, alpha = 0.5, size = 1.0) +
geom_line(data = theta_m_post, aes(x = x, y = density, color = factor(rep_number)),
alpha = 0.9, size = 1.0) +
scale_color_manual(
values = c("1" = "#E69F00", "2" = "#009E20", "3" = "#0072B2"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.04),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04))) +
labs(
subtitle = "Marginal Posterior Densities of Effect Parameter",
x = expression(theta~" Values"),
y = "Density"
) +
theme_minimal() +
guides(color=guide_legend(title="Replicated Experiment"))
print(plot_m_theta)
theta_m_post <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
marg_p_dens <- m_post_theta(  theta = thetaseq,
tr = tr[index],
sr = sr[index],
to = to,
so = so,
null = null,
priorsd = priorsd,
x = alpha,
y = beta
)
out <- data.frame(x = thetaseq, density = marg_p_dens, rep_number = rep_number[index],
parameter = "'Effect parameter' ~ theta", tr = tr[index], sr = sr[index])
return(out)
}))
## Posterior of effect size without using original data
thetaplotDF2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pDens <- dnorm(x = thetaseq, mean = tr[i], sd = sr[i])
out <- data.frame(x = thetaseq, density = pDens, rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i], sr = sr[i])
return(out)
}))
thetaHPD <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- postPPthetaHPD(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(c(thetaplotDF2$density, theta_m_post$density))*(1 + 0.06*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
theta2HPD <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- tr[i] + c(-1, 1)*qnorm(p = 0.975)*sr[i]
out <- data.frame(y = max(c(thetaplotDF2$density, theta_m_post$density))*(1 + 0.05*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
theta2HPD$trFormat <- paste0("{hat(theta)[italic('r')*", theta2HPD$rnumber, "] == ",
round(theta2HPD$tr, 2), "}*',' ~ sigma[italic('r')*",
theta2HPD$rnumber, "] == ", round(theta2HPD$sr, 2))
plot_m_theta <- ggplot() +
geom_errorbarh(data = thetaHPD,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.8, size = 1.0) +
geom_errorbarh(data = theta2HPD,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.7, linetype = "22", size = 1.0) +
geom_line(data = thetaplotDF2, aes(x = x, y = density, color = factor(rep_number)),
lty = 2, alpha = 0.5, size = 1.0) +
geom_line(data = theta_m_post, aes(x = x, y = density, color = factor(rep_number)),
alpha = 0.9, size = 1.0) +
scale_color_manual(
values = c("1" = "#E69F00", "2" = "#009E20", "3" = "#0072B2"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.04),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04))) +
labs(
subtitle = "Marginal Posterior Densities of Effect Parameter",
x = expression(theta~" Values"),
y = "Density"
) +
theme_minimal() +
guides(color=guide_legend(title="Replicated Experiment"))
print(plot_m_theta)
