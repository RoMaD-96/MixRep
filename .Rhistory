rnumber <- c(1, 2, 3, 4)
bf_df <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
bf_theta_random <- bf_theta_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 1, y = 1, m = mu_UIP, v = tau_UIP)
bf_theta <- bf_theta_mix(tr = tr[i], sr = sr[i], to = to, so = so, x = 1, y = 1,
m = mu_UIP, v = tau_UIP, w = 1)
bf_omega <- bf_omega_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 1, y = 1, m = mu_UIP, v = tau_UIP, w_null = 0, w_alt = 1)
bf_random_omega_1 <- bf_omega_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 1, y = 2, m = mu_UIP, v = tau_UIP, w_null = NA, w_alt = NA)
bf_random_omega_2 <- bf_omega_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 2, y = 1, m = mu_UIP, v = tau_UIP, w_null = NA, w_alt = NA)
out <- data.frame(number = rnumber[i], tr = tr[i], sr = sr[i], bf_theta = bf_theta,
bf_theta_random = bf_theta_random, bf_omega = bf_omega,
bf_random_omega_1 = bf_random_omega_1, bf_random_omega_2 = bf_random_omega_2)
return(out)
}))
## Create LaTeX table for theta
dfTab_theta <- bf_df[,1:5] %>%
mutate(bf_theta = format_bf_vec(bf_theta),
bf_theta_random = format_bf_vec(bf_theta_random),
tr = round(tr, 2),
sr = round(sr, 2),
number = as.integer(number)) %>%
arrange(number)
xtab_theta <- xtable(dfTab_theta)
colnames(xtab_theta) <- c("",
"$\\hat{\\theta}_r$",
"$\\sigma_r$",
paste0("$\\mathrm{BF}_{01}\\{\\hat{\\theta}_r \\mid \\mathcal{H}_{1} \\: \\omega \\sim \\mathrm{Beta}(",
eta, ", ", nu, ")\\}$"),
"$\\BF_{01}(\\hat{\\theta}_r \\mid \\mathcal{h}_{1} \\: \\alpha = 1)$"
)
align(xtab_theta) <- rep("c", length(colnames(xtab_theta)) + 1)
## add multicolumns for effet size test and power parameter test
addtorow <- list()
addtorow$pos <- list(-1)
addtorow$command <- '\\toprule'
print(xtab_theta, floating = FALSE, include.rownames = FALSE, add.to.row = addtorow,
sanitize.text.function = function(x){x}, booktabs = TRUE, hline.after = c(0, nrow(xtab_theta)))
## Create LaTeX table for omega
dfTab_omega <- bf_df[,c(1:3,6:8)] %>%
mutate(bf_omega = format_bf_vec(bf_omega),
bf_random_omega_1 = format_bf_vec(bf_random_omega_1),
bf_random_omega_2 = format_bf_vec(bf_random_omega_2),
tr = round(tr, 2),
sr = round(sr, 2),
number = as.integer(number)) %>%
arrange(number)
xtab_omega <- xtable(dfTab_omega)
colnames(xtab_omega) <- c("",
"$\\hat{\\theta}_r$",
"$\\sigma_r$",
paste0("$\\mathrm{BF}_{\\text{dc}}(\\hat{\\theta}_r \\mid \\mathcal{H}_d \\: \\omega = ",
0, ")$"),
paste0("$\\mathrm{BF}_{\\text{dc}}\\{\\hat{\\theta}_r \\mid \\mathcal{H}_d \\: \\omega \\sim \\mathrm{Beta}(",
1, ", ", 2, ")\\}$"),
paste0("$\\mathrm{BF}_{\\text{dc}}\\{\\hat{\\theta}_r \\mid \\mathcal{H}_d \\: \\omega \\sim \\mathrm{Beta}(",
2, ", ", 1, ")\\}$")
)
align(xtab_omega) <- rep("c", length(colnames(xtab_omega)) + 1)
## add multicolumns for effet size test and power parameter test
addtorow <- list()
addtorow$pos <- list(-1)
addtorow$command <- '\\toprule'
print(xtab_omega, floating = FALSE, include.rownames = FALSE, add.to.row = addtorow,
sanitize.text.function = function(x){x}, booktabs = TRUE, hline.after = c(0, nrow(xtab_omega)))
#   ____________________________________________________________________________
#   Libraries                                                               ####
library(ggplot2)
library(ggpubr)
library(colorspace)
library(spatstat)
library(repmix)
library(dplyr)
source("Scripts/RepMixFun_BF.R")
#   ____________________________________________________________________________
#   Fixed Weights                                                           ####
##  ............................................................................
##  Parameter Setting                                                       ####
load("credentials_data.RData")
# Original and Replicated Studies
to <- data %>%
dplyr::filter(type == "original") %>%
dplyr::pull(fis) %>%
as.numeric()
so <- data %>%
dplyr::filter(site == "original") %>%
dplyr::pull(se_fis) %>%
as.numeric()
trep <- data %>%
dplyr::filter(site %in% c("University of Toronto", "Montana State University", "Ashland University")) %>%
dplyr::pull(fis) %>%
as.numeric()
srep <- data %>%
dplyr::filter(site %in% c("University of Toronto", "Montana State University", "Ashland University")) %>%
dplyr::pull(se_fis) %>%
as.numeric()
tp <- round(sum(trep/srep^2)/sum(1/srep^2),2)
sp <- round(sqrt(1/sum(1/srep^2)),2)
tr <- c(trep,tp)
sr <- c(srep,sp)
# Mean and Variance Unit Informative Prior
mu_UIP <- 0
tau_UIP <- 2
# Parameter Grid
n_weights <- 300
n_theta <- 300
wseq <- seq(0, 1, by = 0.1)
thetaseq <- seq(-0.9, 0.9, length.out = 2500)
par_grid <- expand.grid(omega = wseq, theta = thetaseq)
#   ____________________________________________________________________________
#   Posterior with varying weights using ggplot 2                           ####
cols <- hcl.colors(n = length(wseq), palette = "viridis", alpha = 0.9, rev = TRUE)
# Now let's create a data frame for ggplot
densities <- list()
for (i in 1:length(tr)) {
densities[[i]] <- sapply(X = wseq, FUN = function(w) {
thetaposteriormix(theta = thetaseq, tr = tr[i], sr = sr[i], to = to, so = so,
m = mu_UIP, v = tau_UIP, w = w)
})
}
df <- list()
additional_lines <- list()
for (i in 1:length(tr)) {
# Turn the results into a data frame
df[[i]] <- data.frame(theta = rep(thetaseq, times = length(wseq)),
density = as.vector(densities[[i]]),
w = factor(rep(wseq, each = length(thetaseq))))
# Add the additional lines
df[[i]]$likelihood <- dnorm(x = df[[i]]$theta, mean = tr[i], sd = sr[i])
df[[i]]$prior_original <- dnorm(x = df[[i]]$theta, mean = to, sd = so)
df[[i]]$prior_robust <- dnorm(x = df[[i]]$theta, mean = mu_UIP, sd = sqrt(tau_UIP))
df[[i]]$replication <- paste0( "Replication ", i)
# Create a separate data frame for the additional lines to help in creating the legend
additional_lines[[i]] <- data.frame(
theta = rep(thetaseq, 3),
value = c(dnorm(x = thetaseq, mean = tr[i], sd = sr[i]),
dnorm(x = thetaseq, mean = to, sd = so),
dnorm(x = thetaseq, mean = mu_UIP, sd = sqrt(tau_UIP))),
replication = paste0( "Replication ", i),
linetype = factor(rep(c("Likelihood", "Non-Informative Prior", "Prior Original"), each = length(thetaseq)))
)
}
df_densities <- do.call(rbind, df)
df_additional_lines <- do.call(rbind, additional_lines)
df_densities$replication <- factor(df_densities$replication,
levels = c("Replication 1", "Replication 2", "Replication 3", "Replication 4"),
labels = c(expression(" "~hat(theta)[r * 1] == 0.09 ~ ", " ~ sigma[r * 1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03)))
df_additional_lines$replication <- factor(df_additional_lines$replication,
levels = c("Replication 1", "Replication 2", "Replication 3", "Replication 4"),
labels = c(expression(" "~hat(theta)[r * 1] == 0.09 ~ ", " ~ sigma[r * 1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03)))
# The ggplot
plot_post_fix <- ggplot() +
geom_line(data = df_densities, aes(x = theta, y = density, color = w), size = 1) +
geom_line(data = df_additional_lines, aes(x = theta, y = value, linetype = linetype), size = 0.8) +
scale_color_manual(values = cols) +
scale_linetype_manual(values = c("dashed", "dotted", "dotdash"),
labels = c("Likelihood (Replication)", "Prior (Original component)", "Prior (Non-Informative component)")) +
labs(x = expression("Effect Size" ~ theta), y = "Density") +
theme_bw() +
guides(linetype = guide_legend(title = "Density: ", position = "top"),
color = guide_legend(title = "Weight: ", position = "left")
) +
facet_wrap(~ replication, labeller = label_parsed, ncol = 4) +
scale_x_continuous(limits=c(-0.7, 0.7)) +
theme(
strip.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 18),
axis.title.x = element_text(size = 22),
legend.text = element_text(size = 18),
legend.title = element_text(size = 19))
# To make sure that our additional lines are represented in the legend, we need to add them to the plot
# plot_post_fix <- plot_post_fix + geom_line(aes(linetype = "Likelihood (Replication)"), linetype = "dashed", color = "black") +
#   geom_line(aes(linetype = "Prior (Original component)"), linetype = "dotted", color = "black") +
#   geom_line(aes(linetype = "Prior (Robust component)"), linetype = "dotdash", color = "black")
print(plot_post_fix)
ggsave(filename = "plot_post_fix.pdf",path = "Plots", plot = plot_post_fix,
width = 17, height = 7.5, device='pdf', dpi=500, useDingbats = FALSE)
#   ____________________________________________________________________________
#   Effect Size HPDI                                                        ####
HPDI_theta_w_median <- do.call("rbind", lapply(seq(1, length(wseq)), function(i) {
# Nested lapply for each element of tr and sr
results <- lapply(seq_along(tr), function(j) {
hpd <- thetaHPD(level = 0.95, tr = tr[j], sr = sr[j], to = to,
so = so, w = wseq[i], m = mu_UIP, v = tau_UIP)
median_vect <- median_fun(thetaseq, tr = tr[j], sr = sr[j], to = to,
so = so, w = wseq[i], m = mu_UIP, v = tau_UIP)
out <- data.frame(lower = hpd[1], upper = hpd[3], median = median_vect, weight = wseq[i],
tr_val = tr[j], sr_val = sr[j], # Add tr and sr values to the output
width_int = (hpd[3]-hpd[1]), replication = paste0( "Replication ", j))
return(out)
})
do.call("rbind", results) # Combine results for each tr and sr pair
}))
HPDI_theta_w_median <- HPDI_theta_w_median[order(HPDI_theta_w_median$replication), ]
HPDI_theta_w_median$replication  <-  factor(HPDI_theta_w_median$replication,
levels = c("Replication 1", "Replication 2", "Replication 3", "Replication 4"),
labels = c(expression(" "~hat(theta)[r * 1] == 0.09 ~ ", " ~ sigma[r * 1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03)))
#   ____________________________________________________________________________
#   Tipping Point Analysis                                                  ####
# Confidence Interval Replication and Original Study
# z-value for 95% CI
z_value <- qnorm(0.975)
# Calculate 95% CI for each group
ci_o <- c(to - z_value * so, to + z_value * so)
ci_r1 <- c(tr[1] - z_value * sr[1], tr[1] + z_value * sr[1])
ci_r2 <- c(tr[2] - z_value * sr[2], tr[2] + z_value * sr[2])
ci_r3 <- c(tr[3] - z_value * sr[3], tr[3] + z_value * sr[3])
ci_rp <- c(tr[4] - z_value * sr[4], tr[4] + z_value * sr[4])
# Create a data frame for the replication study
data_ci_rep <- data.frame(
median = c(tr[1], tr[2], tr[3], tr[4]),
sr_val = c(sr[1], sr[2], sr[3], sr[4]),
ymin = c(ci_r1[1], ci_r2[1], ci_r3[1], ci_rp[1]),
ymax = c(ci_r1[2], ci_r2[2], ci_r3[2], ci_rp[2]),
weight = c(rep(-0.15,4)),
replication = factor(c("Replication 1", "Replication 2", "Replication 3", "Replication 4"),
levels = c("Replication 1", "Replication 2", "Replication 3", "Replication 4"),
labels = c(expression(" "~hat(theta)[r * 1] == 0.09 ~ ", " ~ sigma[r * 1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03)))
)
# Create a data frame for the original study
data_ci_orig <- data.frame(
median = c(rep(to,4)),
sr_val = c(rep(so,4)),
ymin = c(rep(ci_o[1], 4)),
ymax = c(rep(ci_o[2], 4)),
weight = c(rep(1.15,4)),
replication = factor(c("Replication 1", "Replication 2", "Replication 3", "Replication 4"),
levels = c("Replication 1", "Replication 2", "Replication 3", "Replication 4"),
labels = c(expression(" "~hat(theta)[r * 1] == 0.09 ~ ", " ~ sigma[r * 1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03)))
)
library(RColorBrewer)
palette_colors <- rep(cols,4)
# Plotting the error bars and points
plot_HPDI_median_rep <- ggplot(HPDI_theta_w_median, aes(x = weight, y = median)) +
geom_errorbar(aes(ymin = lower, ymax = upper), width = 0.05, size = 1.4, color = palette_colors) +
geom_errorbar(data = data_ci_rep, aes(ymin = ymin, ymax = ymax),
width = 0.05, size = 1.4, linetype = 5, color = "black") +
geom_errorbar(data = data_ci_orig, aes(ymin = ymin, ymax = ymax),
width = 0.05, size = 1.4, linetype = 5, color = "firebrick4") +
geom_point(data = data_ci_rep, aes(x = weight, y = median), shape = 16, size = 4, color = "black") +
geom_point(data = data_ci_orig, aes(x = weight, y = median), shape = 16, size = 4, color = "firebrick4") +
geom_point(shape = 16, size = 4, color = palette_colors) +
labs(x = "Prior Weight", y = "Effect Size Posterior") +
theme_bw() +
theme(
strip.text.x = element_text(size = 18),
panel.grid.major.x = element_blank(),
legend.position = "none",
legend.title = element_blank(),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 16),
axis.title.x = element_text(size = 22),
legend.text = element_text(size = 18)
) +
facet_wrap(~ replication, labeller = label_parsed, ncol = 4) +
scale_x_continuous(breaks = c(-0.15, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0 ,1.15),
labels = c("Rep.", 0.0, 0.2, 0.4, 0.6, 0.8, 1.0, "Orig."))
# Display the plot
print(plot_HPDI_median_rep)
ggsave(filename = "plot_HPDI_median_rep.pdf",path = "Plots", plot = plot_HPDI_median_rep,
width = 17, height = 7.5, device='pdf', dpi=500, useDingbats = FALSE)
tp
trep
sp
srep
#   ____________________________________________________________________________
#   Libraries                                                               ####
library(ggplot2)
library(ggthemes)
library(ggpubr)
library(colorspace)
#   ____________________________________________________________________________
#   Sources                                                                 ####
source("Scripts/Random_Weights.R")
#   ____________________________________________________________________________
#   Plots                                                                   ####
##  ............................................................................
##  Plot Effect Estimate and 95% CI                                         ####
# z-value for 95% CI
z_value <- qnorm(0.975)
# Calculate 95% CI for each group
ci_o <- c(to - z_value * so, to + z_value * so)
ci_r1 <- c(tr[1] - z_value * sr[1], tr[1] + z_value * sr[1])
ci_r2 <- c(tr[2] - z_value * sr[2], tr[2] + z_value * sr[2])
ci_r3 <- c(tr[3] - z_value * sr[3], tr[3] + z_value * sr[3])
ci_r4 <- c(tr[4] - z_value * sr[4], tr[4] + z_value * sr[4])
# Create a data frame
data <- data.frame(
group = c("Original", "Replication 1", "Replication 2", "Replication 3", "Replication Pooled"),
estimate = c(to, tr[1], tr[2], tr[3], tr[4]),
ymin = c(ci_o[1], ci_r1[1], ci_r2[1], ci_r3[1], ci_r4[1]),
ymax = c(ci_o[2], ci_r1[2], ci_r2[2], ci_r3[2], ci_r4[2]),
color = c("#8A0404", "#E69F00", "#009E20", "#0072B2", "#AA4499")
)
# Plot
plot_theta <- ggplot(data) +
geom_point(aes(x = group, y = estimate, color = group), shape = 16, fill = "white", size = 4.5) +
geom_errorbar(aes(x = group, ymin = ymin, ymax = ymax, color = group), width = 0.15, size = 1.8) +
scale_color_manual(values = data$color) +
labs(
y = "Effect Size Estimate",
x = "Study") +
scale_color_manual(
values = c("Original" = "#8A0404" ,"Replication 1" = "#E69F00", "Replication 2" = "#009E20", "Replication 3" = "#0072B2",
"Replication Pooled" = "#AA4499"),
labels = c(expression(" "~hat(theta)[o] == 0.21 ~ ", " ~ sigma[o] == 0.05),
expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03))) +
theme_bw() +
theme(
# axis.title.x = element_blank(),
# axis.text.x = element_blank(),
# axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank(),
legend.position = "top",
legend.title = element_blank(),
axis.text.y = element_text(size = 18),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 18),
axis.title.x = element_text(size = 22),
legend.text = element_text(size = 18)
)
# pdf("ggplot.pdf", pointsize=100, width=20, height=10)
print(plot_theta)
# dev.off()
ggsave(filename = "plot_theta.pdf",path = "Plots", plot = plot_theta,
width = 17, height = 7.5, device='pdf', dpi=500, useDingbats = FALSE)
##  ............................................................................
##  Contour plot of joint posterior                                         ####
# Create a new column for ordering
postdens_wrapper$rep_order <- ifelse(postdens_wrapper$rep_number == 4, "p", as.character(postdens_wrapper$rep_number))
# Create the original rep_setting column with proper labels
postdens_wrapper$rep_setting <- paste0(
"{hat(theta)[r*",
ifelse(postdens_wrapper$rep_number == 4, "p", postdens_wrapper$rep_number),
"] == ",
round(postdens_wrapper$tr, 2),
"}*',' ~ sigma[r*",
ifelse(postdens_wrapper$rep_number == 4, "p", postdens_wrapper$rep_number),
"] == ",
round(postdens_wrapper$sr, 2)
)
# Convert the new rep_order column to a factor to specify the order
postdens_wrapper$rep_order <- factor(postdens_wrapper$rep_order, levels = c("1", "2", "3", "p"))
plot_joint <- ggplot(data = postdens_wrapper, aes(x = theta, y = omega, fill = density)) +
facet_wrap(~ rep_setting, labeller = label_parsed, ncol = 4) +
geom_raster(interpolate = TRUE) +
geom_contour(aes(z = density), breaks = seq(0, 24, 3),  alpha = 0.35, size = 0.5) +
scale_fill_continuous_sequential(palette = "Blues 3", rev = TRUE) +
labs(
x = bquote("Effect Size" ~ theta),
y = bquote("Weight Parameter" ~ omega),
fill = "Posterior \n Density"
) +
guides(fill = guide_colorbar(barheight = 20, barwidth = 1.3, title.position = "top")) +
scale_x_continuous(limits=c(-0.5, 0.6), expand = c(0.04, 0.005)) +
scale_y_continuous(limits=c(0, 1), expand = c(0.005, 0.005)) +
theme_bw() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.text.x = element_text(size = 18),
legend.position = "right",
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 16),
axis.title.x = element_text(size = 22),
legend.title=element_text(size=16),
legend.text = element_text(size = 16),
legend.key.size = unit(10, 'cm'))
print(plot_joint)
ggsave(filename = "plot_joint.pdf",path = "Plots", plot = plot_joint,
width = 17, height = 7.5, device='pdf', dpi=500, useDingbats = FALSE)
##  ............................................................................
##  Plot Marginal Posterior weights                                         ####
plot_weights_m_hpd <- ggplot() +
geom_errorbarh(data = HPDI_weights,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.8, size = 1.2) +
geom_line(data=weights_m_post, aes(x=x, y=density, group=rep_number, color=factor(rep_number)),
lty = 1, alpha = 0.9, size = 1.2) +
scale_color_manual(
values = c("1" = "#E69F00", "2" = "#009E20", "3" = "#0072B2", "4" = "#AA4499"),
labels = c(expression(" "~hat(theta)[r * 1] == 0.09 ~ ", " ~ sigma[r * 1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03))) +
labs(
x = expression(omega~" Values"),
y = "Density"
) +
theme_bw() +
theme(strip.placement = "outside",   # format to look like title
strip.background = element_blank(),
strip.text.x = element_text(size = 18),
legend.position = "top",
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 16),
axis.title.x = element_text(size = 22),
legend.title= element_blank(),
legend.text = element_text(size = 16)) +
guides(color=guide_legend(title="Replicated Experiment"))
print(plot_weights_m_hpd)
#Flat prior and linear combination of omegas
##  ............................................................................
##  Marginal Posterior Theta                                                ####
plot_m_theta <- ggplot() +
geom_errorbarh(data = HPDI_theta,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.8, size = 1.0) +
geom_errorbarh(data = HPDI_theta_2,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.7, linetype = "22", size = 1.0) +
geom_line(data = theta_m_post_2, aes(x = x, y = density, color = factor(rep_number)),
lty = 22, alpha = 0.5, size = 1.0) +
geom_line(data = theta_m_post, aes(x = x, y = density, color = factor(rep_number)),
alpha = 0.9, size = 1.0) +
scale_color_manual(
values = c("1" = "#E69F00", "2" = "#009E20", "3" = "#0072B2", "4" = "#AA4499"),
labels = c(expression(" "~hat(theta)[r * 1] == 0.09 ~ ", " ~ sigma[r * 1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03))) +
labs(
x = expression(theta~" Values"),
y = "Density"
) +
xlim(-0.6, 0.6) +
theme_bw() +
theme(strip.placement = "outside",   # format to look like title
strip.background = element_blank(),
strip.text.x = element_text(size = 18),
legend.position = "top",
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 16),
axis.title.x = element_text(size = 22),
legend.title= element_blank(),
legend.text = element_text(size = 16)) +
guides(color=guide_legend(title="Replicated Experiment"))
print(plot_m_theta)
#   ____________________________________________________________________________
#   Arrange of Fig. 6 (Marginal Posterior Densities)                        ####
plot_marg_post_joint <- ggplot() +
geom_errorbarh(data = HPDI_theta,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.8, size = 1.0) +
geom_errorbarh(data = HPDI_theta_2,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.7, linetype = "22", size = 1.0) +
geom_line(data = theta_m_post_2, aes(x = x, y = density, color = factor(rep_number)),
lty = 22, alpha = 0.5, size = 1.0) +
geom_line(data = theta_m_post, aes(x = x, y = density, color = factor(rep_number)),
alpha = 0.9, size = 1.0) +
geom_errorbarh(data = HPDI_weights,
aes(xmin = lower, xmax = upper, y = y*1.05, color = factor(rep_number),
height = height), alpha = 0.8, size = 1.2) +
geom_line(data=weights_m_post, aes(x=x, y=density, group=rep_number, color=factor(rep_number)),
lty = 1, alpha = 0.9, size = 1.2) +
labs( x = NULL,
y = "Marginal Posterior Density",
color = ""
) +
scale_color_manual(
values = c("1" = "#E69F00", "2" = "#009E20", "3" = "#0072B2", "4" = "#AA4499"),
labels = c(expression(" "~hat(theta)[r * 1] == 0.09 ~ ", " ~ sigma[r * 1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r * 2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r * 3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03))) +
facet_wrap(~ parameter, scales = "free", labeller = label_parsed,
strip.position = "bottom") +
theme_bw() +
theme(strip.placement = "outside",   # format to look like title
strip.background = element_blank(),
strip.text.x = element_text(size = 22),
legend.position = "top",
axis.text.y = element_text(size = 18),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 18),
axis.title.x = element_text(size = 22),
legend.title= element_blank(),
legend.text = element_text(size = 18)) +
guides(color=guide_legend(title="Replicated Experiment"))
print(plot_marg_post_joint)
ggsave(filename = "plot_marg_post_joint.pdf",path = "Plots", plot = plot_marg_post_joint,
width = 17, height = 7.5, device='pdf', dpi=500, useDingbats = FALSE)
load("credentials_data.RData")
View(data)
