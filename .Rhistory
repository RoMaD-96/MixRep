labs(
x = NULL,
y = "Marginal Posterior Density",
color = ""
) +
scale_color_manual(
values = c("1" = "#E69F00", "2" = "#009E20", "3" = "#0072B2"),
labels = c(expression(" "~hat(theta)[r*1] == 0.090 ~ ", " ~ sigma[r*1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.210 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.440 ~ ", " ~ sigma[r*3] == 0.04))) +
facet_wrap(~ parameter, scales = "free", labeller = label_parsed,
strip.position = "bottom") +
theme_light() +
theme(strip.placement = "outside",   # format to look like title
strip.background = element_blank(),
strip.text.x = element_text(size = 18),
legend.position = "top",
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 16),
axis.title.x = element_text(size = 22),
legend.title= element_blank(),
legend.text = element_text(size = 16)) +
guides(color=guide_legend(title="Replicated Experiment"))
ggsave(filename = "plot_marg_post_joint.pdf",path = "Plots", plot = plot_marg_post_joint,
width = 17, height = 7.5, device='pdf', dpi=500, useDingbats = FALSE)
# Original and Replicated Studies
to <- 0.21
so <- 0.05
tr <- c(0.09, 0.21, 0.44)
sr <- c(0.045, 0.06, 0.04)
null <- 0
priorsd <- sqrt(2)
wseq <- seq(0, 1, by = 0.1)
thetaseq <- seq(-6, 6, length.out = 2500)
cols <- hcl.colors(n = length(wseq), palette = "viridis", alpha = 0.9, rev = TRUE)
# Now let's create a data frame for ggplot
densities <- list()
for (i in 1:length(tr)) {
densities[[i]] <- sapply(X = wseq, FUN = function(w) {
rmapPostFix_alt(theta = thetaseq, tr = tr[i], sr = sr[i], to = to, so = so,
null = null, priorsd = priorsd, w = w)
})
}
df <- list()
additional_lines <- list()
for (i in 1:length(tr)) {
# Turn the results into a data frame
df[[i]] <- data.frame(theta = rep(thetaseq, times = length(wseq)),
density = as.vector(densities[[i]]),
w = factor(rep(wseq, each = length(thetaseq))))
# Add the additional lines
df[[i]]$likelihood <- dnorm(x = df[[i]]$theta, mean = tr[i], sd = sr[i])
df[[i]]$prior_original <- dnorm(x = df[[i]]$theta, mean = to, sd = so)
df[[i]]$prior_robust <- dnorm(x = df[[i]]$theta, mean = null, sd = priorsd)
df[[i]]$replication <- paste0( "Replication ", i)
# Create a separate data frame for the additional lines to help in creating the legend
additional_lines[[i]] <- data.frame(
theta = rep(thetaseq, 3),
value = c(dnorm(x = thetaseq, mean = tr[i], sd = sr[i]),
dnorm(x = thetaseq, mean = to, sd = so),
dnorm(x = thetaseq, mean = null, sd = priorsd)),
replication = paste0( "Replication ", i),
linetype = factor(rep(c("Likelihood", "Non-Informative Prior", "Prior Original"), each = length(thetaseq)))
)
}
df_densities <- do.call(rbind, df)
df_additional_lines <- do.call(rbind, additional_lines)
df_densities$replication <- factor(df_densities$replication,
levels = c("Replication 1", "Replication 2", "Replication 3"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.045),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04)))
df_additional_lines$replication <- factor(df_additional_lines$replication,
levels = c("Replication 1", "Replication 2", "Replication 3"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.045),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04)))
# The ggplot
plot_post_fix <- ggplot() +
geom_line(data = df_densities, aes(x = theta, y = density, color = w), size = 1) +
geom_line(data = df_additional_lines, aes(x = theta, y = value, linetype = linetype), size = 0.8) +
scale_color_manual(values = cols) +
scale_linetype_manual(values = c("dashed", "dotted", "dotdash"),
labels = c("Likelihood (Replication)", "Prior (Original component)", "Prior (Non-Informative component)")) +
labs(x = expression("Effect Size" ~ theta), y = "Density") +
theme_bw() +
guides(linetype = guide_legend(title = "Density"),
color = guide_legend(title = "Weight")
) +
facet_wrap(~ replication, labeller = label_parsed)
# To make sure that our additional lines are represented in the legend, we need to add them to the plot
plot_post_fix <- plot_post_fix + geom_line(aes(linetype = "Likelihood (Replication)"), linetype = "dashed", color = "black") +
geom_line(aes(linetype = "Prior (Original component)"), linetype = "dotted", color = "black") +
geom_line(aes(linetype = "Prior (Robust component)"), linetype = "dotdash", color = "black") +
scale_x_continuous(limits=c(-0.10, 0.6)) +
theme(legend.position = "right",
strip.text.x = element_text(size = 18),
axis.text.y = element_text(size = 18),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 18),
axis.title.x = element_text(size = 22),
legend.text = element_text(size = 18),
legend.title = element_text(size = 19))
ggsave(filename = "plot_post_fix.pdf",path = "Plots", plot = plot_post_fix,
width = 17, height = 7.5, device='pdf', dpi=500, useDingbats = FALSE)
HPDI_theta_w_median <- do.call("rbind", lapply(seq(1, length(wseq)), function(i) {
# Nested lapply for each element of tr and sr
results <- lapply(seq_along(tr), function(j) {
hpd <- HPDI_post_m_theta_fix(level = 0.95, tr = tr[j], sr = sr[j], to = to,
so = so, w = wseq[i], null = null, priorsd = priorsd)
median_vect <- median_fun(thetaseq, tr = tr[j], sr = sr[j], to = to,
so = so, w = wseq[i], null = null, priorsd = priorsd)
out <- data.frame(lower = hpd[1], upper = hpd[2], median = median_vect, weight = wseq[i],
tr_val = tr[j], sr_val = sr[j], # Add tr and sr values to the output
width_int = (hpd[2]-hpd[1]), replication = paste0( "Replication ", j))
return(out)
})
do.call("rbind", results) # Combine results for each tr and sr pair
}))
HPDI_theta_w_median <- HPDI_theta_w_median[order(HPDI_theta_w_median$replication), ]
HPDI_theta_w_median$replication  <-  factor(HPDI_theta_w_median$replication,
levels = c("Replication 1", "Replication 2", "Replication 3"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.045),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.060),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.040)))
# z-value for 95% CI
z_value <- qnorm(0.975)
# Calculate 95% CI for each group
ci_o <- c(to - z_value * so, to + z_value * so)
ci_r1 <- c(tr[1] - z_value * sr[1], tr[1] + z_value * sr[1])
ci_r2 <- c(tr[2] - z_value * sr[2], tr[2] + z_value * sr[2])
ci_r3 <- c(tr[3] - z_value * sr[3], tr[3] + z_value * sr[3])
# Create a data frame for the replication study
data_ci_rep <- data.frame(
median = c(tr[1], tr[2], tr[3]),
sr_val = c(sr[1], sr[2], sr[3]),
ymin = c(ci_r1[1], ci_r2[1], ci_r3[1]),
ymax = c(ci_r1[2], ci_r2[2], ci_r3[2]),
weight = c(rep(-0.15,3)),
replication = factor(c("Replication 1", "Replication 2", "Replication 3"),
levels = c("Replication 1", "Replication 2", "Replication 3"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.045),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.060),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.040)))
)
# Create a data frame for the original study
data_ci_orig <- data.frame(
median = c(rep(to,3)),
sr_val = c(rep(so,3)),
ymin = c(rep(ci_o[1], 3)),
ymax = c(rep(ci_o[2], 3)),
weight = c(rep(1.15,3)),
replication = factor(c("Replication 1", "Replication 2", "Replication 3"),
levels = c("Replication 1", "Replication 2", "Replication 3"),
labels = c(expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.045),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.060),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.040)))
)
# Plotting the error bars and points
plot_HPDI_median_rep <- ggplot(HPDI_theta_w_median, aes(x = weight, y = median)) +
geom_errorbar(aes(ymin = lower, ymax = upper, color = replication), width = 0.05, size = 1.4) +
geom_errorbar(data = data_ci_rep, aes(ymin = ymin, ymax = ymax, color = "black"),
width = 0.05, size = 1.4, linetype = 1) +
geom_errorbar(data = data_ci_orig, aes(ymin = ymin, ymax = ymax, color = "firebrick4"),
width = 0.05, size = 1.4, linetype = 1) +
geom_point(data = data_ci_rep, aes(x = weight, y = median), shape = 16, size = 4, color = "black") +
geom_point(data = data_ci_orig, aes(x = weight, y = median), shape = 16, size = 4, color = "firebrick4") +
geom_point(aes(color = replication), shape = 16, size = 4) +
labs(x = "Prior Weight", y = "Effect Size Posterior") +
theme_bw() +
theme(
strip.text.x = element_text(size = 18),
panel.grid.major.x = element_blank(),
legend.position = "none",
legend.title = element_blank(),
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 16),
axis.title.x = element_text(size = 22),
legend.text = element_text(size = 18)
) +
facet_wrap(~ replication, labeller = label_parsed) +
scale_color_manual(values = c("#E69F00", "#009E20", "#0072B2", "black", "firebrick4")) +
scale_x_continuous(breaks = c(-0.15, 0.0, 0.2, 0.4, 0.6, 0.8, 1.0 ,1.15),
labels = c("Rep.", 0.0, 0.2, 0.4, 0.6, 0.8, 1.0, "Orig."))
# Display the plot
print(plot_HPDI_median_rep)
ggsave(filename = "plot_HPDI_median_rep.pdf",path = "Plots", plot = plot_HPDI_median_rep,
width = 17, height = 7.5, device='pdf', dpi=500, useDingbats = FALSE)
format_bf <- function(BF, digits = "default") {
## check inputs
stopifnot(
length(BF) == 1,
is.numeric(BF),
(is.finite(BF) && 0 < BF) || is.na(BF),
length(digits) == 1,
(is.character(digits) && digits == "default") ||
(is.numeric(digits) && 0 <= digits)
)
## return NA if input NA/NaN
if (is.na(BF) || is.nan(BF))
result <- NA
else {
## format BF
if (digits == "default") {
if (BF < 1/1000)
result <- "< 1/1000"
if ((BF >= 1/1000) & (BF <= 1/10))
result <- paste0("1/", as.character(round(1/BF)))
if ((BF > 1/10) & (BF < 1))
result <- paste0("1/", as.character(round(1/BF, digits = 1)))
if ((BF < 10) & (BF >= 1))
result <- as.character(round(BF, digits = 1))
if ((BF >= 10) & (BF <= 1000))
result <- as.character(round(BF))
if (BF > 1000)
result <- "> 1000"
} else {
if (BF < 1)
result <- paste0("1/", as.character(round(1/BF, digits = digits)))
else
result <- as.character(round(BF, digits = digits))
}
## when 1/1 return 1
if (result == "1/1") result <- "1"
}
return(result)
}
format_bf_vec <- Vectorize(FUN = format_bf)
rnumber <- c(1, 2, 3)
bf_df <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
bf_theta_random <- bf_theta_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 1, y = 1, null = null, priorsd = priorsd)
bf_theta <- bf_theta_mix(tr = tr[i], sr = sr[i], to = to, so = so, x = 1, y = 1,
null = null,priorsd = priorsd, w = 1)
bf_omega <- bf_omega_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 1, y = 1, null = null, priorsd = priorsd, w_null = 0, w_alt = 1)
bf_random_omega_1 <- bf_omega_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 1, y = 2, null = null, priorsd = priorsd, w_null = NA, w_alt = NA)
bf_random_omega_2 <- bf_omega_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 2, y = 1, null = null, priorsd = priorsd, w_null = NA, w_alt = NA)
out <- data.frame(number = rnumber[i], tr = tr[i], sr = sr[i], bf_theta = bf_theta,
bf_theta_random = bf_theta_random, bf_omega = bf_omega,
bf_random_omega_1 = bf_random_omega_1, bf_random_omega_2 = bf_random_omega_2)
return(out)
}))
## Create LaTeX table for theta
dfTab_theta <- bf_df[,1:5] %>%
mutate(bf_theta = format_bf_vec(bf_theta),
bf_theta_random = format_bf_vec(bf_theta_random),
tr = round(tr, 2),
sr = round(sr, 2),
number = as.integer(number)) %>%
arrange(tr)
xtab_theta <- xtable(dfTab_theta)
colnames(xtab_theta) <- c("",
"$\\hat{\\theta}_r$",
"$\\sigma_r$",
paste0("$\\mathrm{BF}_{01}\\{\\hat{\\theta}_r \\mid \\mathcal{H}_{1} \\: \\omega \\sim \\mathrm{Beta}(",
alpha, ", ", beta, ")\\}$"),
"$\\BF_{01}(\\hat{\\theta}_r \\mid \\mathcal{h}_{1} \\: \\alpha = 1)$"
)
align(xtab_theta) <- rep("c", length(colnames(xtab_theta)) + 1)
## add multicolumns for effet size test and power parameter test
addtorow <- list()
addtorow$pos <- list(-1)
addtorow$command <- '\\toprule'
print(xtab_theta, floating = FALSE, include.rownames = FALSE, add.to.row = addtorow,
sanitize.text.function = function(x){x}, booktabs = TRUE, hline.after = c(0, nrow(xtab_theta)))
library(ggplot2)
library(ggthemes)
library(ggpubr)
library(colorspace)
library(dplyr)
library(knitr)
library(xtable)
source("Scripts/RepMixFun.R")
# Original and Replicated Studies
to <- 0.21
so <- 0.05
tr <- c(0.09, 0.21, 0.44)
sr <- c(0.05, 0.06, 0.04)
null <- 0
priorsd <- sqrt(2)
# Parameter Grid
n_weights <- 300
n_theta <- 300
wseq <- seq(0, 1, length.out = n_weights)
thetaseq <- seq(-0.2, 0.6, length.out = 2500)
par_grid <- expand.grid(omega = wseq, theta = thetaseq)
# Uniform Prior
alpha <- 1
beta <- 1
# Replication Number
rep_number <- c(1,2,3)
postdens <- rmapPost(theta = par_grid$theta, w = par_grid$omega, tr = tr[1], sr = sr[1], to = to, so = so,
null = null, priorsd = priorsd, x = alpha, y = beta)
postdens_wrapper <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
post_dens <- rmapPost(
theta = par_grid$theta,
w = par_grid$omega,
tr = tr[index],
sr = sr[index],
to = to,
so = so,
null = null,
priorsd = priorsd,
x = alpha,
y = beta
)
par_grid$tr <- tr[index]
par_grid$sr <- sr[index]
par_grid$rep_number <- index
par_grid$density <- post_dens
return(par_grid)
}))
weights_m_post <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
marg_p_dens <- m_post_weights(w = wseq,
tr = tr[index],
sr = sr[index],
to = to,
so = so,
null = null,
priorsd = priorsd,
x = alpha,
y = beta
)
out <- data.frame(x = wseq, density = marg_p_dens, rep_number = rep_number[index],
parameter = "'Weight parameter' ~ omega", tr = tr[index], sr = sr[index])
return(out)
}))
HPDI_weights <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpdi <- HPDI_post_m_weights(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(weights_m_post$density)*(1 + 0.05*i),
lower = hpdi[1], upper = hpdi[2], rep_number = rep_number[i],
parameter = "'Weight parameter' ~ omega", tr = tr[i],
sr = sr[i], height = 0.2)
return(out)
}))
theta_m_post <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
marg_p_dens <- m_post_theta(  theta = thetaseq,
tr = tr[index],
sr = sr[index],
to = to,
so = so,
null = null,
priorsd = priorsd,
x = alpha,
y = beta
)
out <- data.frame(x = thetaseq, density = marg_p_dens, rep_number = rep_number[index],
parameter = "'Effect size' ~ theta", tr = tr[index], sr = sr[index])
return(out)
}))
## Posterior of effect size without using original data
theta_m_post_2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pDens <- dnorm(x = thetaseq, mean = tr[i], sd = sr[i])
out <- data.frame(x = thetaseq, density = pDens, rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i], sr = sr[i])
return(out)
}))
HPDI_theta <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- HPDI_post_m_theta(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(c(theta_m_post_2$density, theta_m_post$density))*(1 + 0.06*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
HPDI_theta_2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- tr[i] + c(-1, 1)*qnorm(p = 0.975)*sr[i]
out <- data.frame(y = max(c(theta_m_post_2$density, theta_m_post$density))*(1 + 0.05*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
HPDI_theta_2$trFormat <- paste0("{hat(theta)[italic('r')*", HPDI_theta_2$rnumber, "] == ",
round(HPDI_theta_2$tr, 2), "}*',' ~ sigma[italic('r')*",
HPDI_theta_2$rnumber, "] == ", round(HPDI_theta_2$sr, 2))
format_bf <- function(BF, digits = "default") {
## check inputs
stopifnot(
length(BF) == 1,
is.numeric(BF),
(is.finite(BF) && 0 < BF) || is.na(BF),
length(digits) == 1,
(is.character(digits) && digits == "default") ||
(is.numeric(digits) && 0 <= digits)
)
## return NA if input NA/NaN
if (is.na(BF) || is.nan(BF))
result <- NA
else {
## format BF
if (digits == "default") {
if (BF < 1/1000)
result <- "< 1/1000"
if ((BF >= 1/1000) & (BF <= 1/10))
result <- paste0("1/", as.character(round(1/BF)))
if ((BF > 1/10) & (BF < 1))
result <- paste0("1/", as.character(round(1/BF, digits = 1)))
if ((BF < 10) & (BF >= 1))
result <- as.character(round(BF, digits = 1))
if ((BF >= 10) & (BF <= 1000))
result <- as.character(round(BF))
if (BF > 1000)
result <- "> 1000"
} else {
if (BF < 1)
result <- paste0("1/", as.character(round(1/BF, digits = digits)))
else
result <- as.character(round(BF, digits = digits))
}
## when 1/1 return 1
if (result == "1/1") result <- "1"
}
return(result)
}
format_bf_vec <- Vectorize(FUN = format_bf)
rnumber <- c(1, 2, 3)
bf_df <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
bf_theta_random <- bf_theta_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 1, y = 1, null = null, priorsd = priorsd)
bf_theta <- bf_theta_mix(tr = tr[i], sr = sr[i], to = to, so = so, x = 1, y = 1,
null = null,priorsd = priorsd, w = 1)
bf_omega <- bf_omega_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 1, y = 1, null = null, priorsd = priorsd, w_null = 0, w_alt = 1)
bf_random_omega_1 <- bf_omega_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 1, y = 2, null = null, priorsd = priorsd, w_null = NA, w_alt = NA)
bf_random_omega_2 <- bf_omega_mix(tr = tr[i], sr = sr[i], to = to, so = so,
x = 2, y = 1, null = null, priorsd = priorsd, w_null = NA, w_alt = NA)
out <- data.frame(number = rnumber[i], tr = tr[i], sr = sr[i], bf_theta = bf_theta,
bf_theta_random = bf_theta_random, bf_omega = bf_omega,
bf_random_omega_1 = bf_random_omega_1, bf_random_omega_2 = bf_random_omega_2)
return(out)
}))
## Create LaTeX table for theta
dfTab_theta <- bf_df[,1:5] %>%
mutate(bf_theta = format_bf_vec(bf_theta),
bf_theta_random = format_bf_vec(bf_theta_random),
tr = round(tr, 2),
sr = round(sr, 2),
number = as.integer(number)) %>%
arrange(tr)
xtab_theta <- xtable(dfTab_theta)
colnames(xtab_theta) <- c("",
"$\\hat{\\theta}_r$",
"$\\sigma_r$",
paste0("$\\mathrm{BF}_{01}\\{\\hat{\\theta}_r \\mid \\mathcal{H}_{1} \\: \\omega \\sim \\mathrm{Beta}(",
alpha, ", ", beta, ")\\}$"),
"$\\BF_{01}(\\hat{\\theta}_r \\mid \\mathcal{h}_{1} \\: \\alpha = 1)$"
)
align(xtab_theta) <- rep("c", length(colnames(xtab_theta)) + 1)
## add multicolumns for effet size test and power parameter test
addtorow <- list()
addtorow$pos <- list(-1)
addtorow$command <- '\\toprule'
print(xtab_theta, floating = FALSE, include.rownames = FALSE, add.to.row = addtorow,
sanitize.text.function = function(x){x}, booktabs = TRUE, hline.after = c(0, nrow(xtab_theta)))
## Create LaTeX table for omega
dfTab_omega <- bf_df[,c(1:3,6:8)] %>%
mutate(bf_omega = format_bf_vec(bf_omega),
bf_random_omega_1 = format_bf_vec(bf_random_omega_1),
bf_random_omega_2 = format_bf_vec(bf_random_omega_2),
tr = round(tr, 2),
sr = round(sr, 2),
number = as.integer(number)) %>%
arrange(tr)
xtab_omega <- xtable(dfTab_omega)
colnames(xtab_omega) <- c("",
"$\\hat{\\theta}_r$",
"$\\sigma_r$",
paste0("$\\mathrm{BF}_{\\text{dc}}(\\hat{\\theta}_r \\mid \\mathcal{H}_d \\: \\omega = ",
0, ")$"),
paste0("$\\mathrm{BF}_{\\text{dc}}\\{\\hat{\\theta}_r \\mid \\mathcal{H}_d \\: \\omega \\sim \\mathrm{Beta}(",
1, ", ", 2, ")\\}$"),
paste0("$\\mathrm{BF}_{\\text{dc}}\\{\\hat{\\theta}_r \\mid \\mathcal{H}_d \\: \\omega \\sim \\mathrm{Beta}(",
2, ", ", 1, ")\\}$")
)
align(xtab_omega) <- rep("c", length(colnames(xtab_omega)) + 1)
## add multicolumns for effet size test and power parameter test
addtorow <- list()
addtorow$pos <- list(-1)
addtorow$command <- '\\toprule'
print(xtab_omega, floating = FALSE, include.rownames = FALSE, add.to.row = addtorow,
sanitize.text.function = function(x){x}, booktabs = TRUE, hline.after = c(0, nrow(xtab_omega)))
HPDI_theta <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- HPDI_post_m_theta(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = alpha, y = beta, null = null, priorsd = priorsd)
out <- data.frame(y = max(c(theta_m_post_2$density, theta_m_post$density))*(1 + 0.06*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
HPDI_theta_2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- tr[i] + c(-1, 1)*qnorm(p = 0.975)*sr[i]
out <- data.frame(y = max(c(theta_m_post_2$density, theta_m_post$density))*(1 + 0.05*i),
lower = hpd[1], upper = hpd[2], rep_number = rep_number[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
HPDI_theta_2$trFormat <- paste0("{hat(theta)[italic('r')*", HPDI_theta_2$rnumber, "] == ",
round(HPDI_theta_2$tr, 2), "}*',' ~ sigma[italic('r')*",
HPDI_theta_2$rnumber, "] == ", round(HPDI_theta_2$sr, 2))
HPDI_theta
HPDI_theta_2
