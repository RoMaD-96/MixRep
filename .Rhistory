geom_errorbarh(data = HPDI_theta_2,
aes(xmin = lower, xmax = upper, y = y*1.05, color = rep_setting,
height = height), alpha = 0.7, linetype = "22", size = 1.0) +
geom_line(data = marg_theta_dens2, aes(x = x, y = density, color = rep_setting),
lty = 2, alpha = 0.5, size = 1.0) +
geom_line(data = marg_plot_df, aes(x = x, y = density, color = rep_setting),
alpha = 0.9, size = 1.0) +
facet_wrap(~ parameter, scales = "free", labeller = label_parsed,
strip.position = "bottom") +
theme_bw() +
labs(x = NULL, y = "Marginal posterior density", color = "") +
scale_color_manual(values = colblind, labels = scales::parse_format()) +
theme(strip.placement = "outside",   # format to look like title
strip.background = element_blank(),
strip.text.x = element_text(size = 18),
legend.position = "top",
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 16),
axis.title.x = element_text(size = 22),
legend.title= element_blank(),
legend.text = element_text(size = 16)) +
guides(color=guide_legend(title="Replicated Experiment"))
plot_marg_post_joint
## Plot of marginal posteriors
plot_marg_post_joint <- ggplot() +
geom_errorbarh(data = HPDI_df,
aes(xmin = lower, xmax = upper, y = y*1.05, color = rep_setting,
height = height), alpha = 0.8, size = 1.0) +
geom_errorbarh(data = HPDI_theta_2,
aes(xmin = lower, xmax = upper, y = y*1.05, color = rep_setting,
height = height), alpha = 0.7, linetype = "22", size = 1.0) +
geom_line(data = marg_theta_dens2, aes(x = x, y = density, color = rep_setting),
lty = 2, alpha = 0.5, size = 1.0) +
geom_line(data = marg_plot_df, aes(x = x, y = density, color = rep_setting),
alpha = 0.9, size = 1.0) +
# geom_line(data = alpha_limit_df, aes(x = x, y = density), col = 1, lty = 3, alpha = 0.9, size = 1.0) +
facet_wrap(~ parameter, scales = "free", labeller = label_parsed,
strip.position = "bottom") +
theme_bw() +
labs(x = NULL, y = "Marginal posterior density", color = "") +
scale_color_manual(values = colblind, labels = scales::parse_format()) +
theme(strip.placement = "outside",   # format to look like title
strip.background = element_blank(),
strip.text.x = element_text(size = 18),
legend.position = "top",
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 16),
axis.title.x = element_text(size = 22),
legend.title= element_blank(),
legend.text = element_text(size = 16)) +
guides(color=guide_legend(title="Replicated Experiment"))
## Combine all plots
ggpubr::ggarrange(pp_plot_joint, plot_marg_post_joint, ncol = 1)
#   ____________________________________________________________________________
#   Sources                                                                 ####
source("Scripts/Mixture_Priors/Random_Weights.R")
# z-value for 95% CI
z_value <- qnorm(0.975)
# Calculate 95% CI for each group
ci_o <- c(to - z_value * so, to + z_value * so)
ci_r1 <- c(tr[1] - z_value * sr[1], tr[1] + z_value * sr[1])
ci_r2 <- c(tr[2] - z_value * sr[2], tr[2] + z_value * sr[2])
ci_r3 <- c(tr[3] - z_value * sr[3], tr[3] + z_value * sr[3])
ci_r4 <- c(tr[4] - z_value * sr[4], tr[4] + z_value * sr[4])
# Create a data frame
data <- data.frame(
group = c("Original", "Replication 1", "Replication 2", "Replication 3", "Replication Pooled"),
estimate = c(to, tr[1], tr[2], tr[3], tr[4]),
ymin = c(ci_o[1], ci_r1[1], ci_r2[1], ci_r3[1], ci_r4[1]),
ymax = c(ci_o[2], ci_r1[2], ci_r2[2], ci_r3[2], ci_r4[2]),
color = c("#8A0404", "#E69F00", "#009E20", "#0072B2", "#AA4499")
)
plot_theta <- ggplot(data) +
geom_point(aes(x = group, y = estimate, color = group), shape = 16, fill = "white", size = 4.5) +
geom_errorbar(aes(x = group, ymin = ymin, ymax = ymax, color = group), width = 0.15, size = 1.8) +
scale_color_manual(values = data$color) +
labs(
y = "Effect Size Estimate",
x = "Study") +
scale_color_manual(
values = c("Original" = "#8A0404" ,"Replication 1" = "#E69F00", "Replication 2" = "#009E20", "Replication 3" = "#0072B2",
"Replication Pooled" = "#AA4499"),
labels = c(expression(" "~hat(theta)[o] == 0.21 ~ ", " ~ sigma[o] == 0.05),
expression(" "~hat(theta)[r*1] == 0.09 ~ ", " ~ sigma[r*1] == 0.05),
expression(" "~hat(theta)[r * 2] == 0.21 ~ ", " ~ sigma[r*2] == 0.06),
expression(" "~hat(theta)[r * 3] == 0.44 ~ ", " ~ sigma[r*3] == 0.04),
expression(" "~hat(theta)[r * p] == 0.28 ~ ", " ~ sigma[r * p] == 0.03))) +
theme_bw() +
theme(
# axis.title.x = element_blank(),
# axis.text.x = element_blank(),
# axis.ticks.x = element_blank(),
panel.grid.major.x = element_blank(),
legend.position = "top",
legend.title = element_blank(),
axis.text.y = element_text(size = 18),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 18),
axis.title.x = element_text(size = 22),
legend.text = element_text(size = 18)
)
# pdf("ggplot.pdf", pointsize=100, width=20, height=10)
print(plot_theta)
ggsave(filename = "plot_theta.pdf",path = "Plots", plot = plot_theta,
width = 17, height = 7.5, device='pdf', dpi=500, useDingbats = FALSE)
# Create a new column for ordering
postdens_wrapper$rep_order <- ifelse(postdens_wrapper$rep_number == 4, "p", as.character(postdens_wrapper$rep_number))
# Create the original rep_setting column with proper labels
postdens_wrapper$rep_setting <- paste0(
"{hat(theta)[r*",
ifelse(postdens_wrapper$rep_number == 4, "p", postdens_wrapper$rep_number),
"] == ",
round(postdens_wrapper$tr, 2),
"}*',' ~ sigma[r*",
ifelse(postdens_wrapper$rep_number == 4, "p", postdens_wrapper$rep_number),
"] == ",
round(postdens_wrapper$sr, 2)
)
# Convert the new rep_order column to a factor to specify the order
postdens_wrapper$rep_order <- factor(postdens_wrapper$rep_order, levels = c("1", "2", "3", "p"))
plot_joint <- ggplot(data = postdens_wrapper, aes(x = theta, y = omega, fill = density)) +
facet_wrap(~ rep_setting, labeller = label_parsed, ncol = 4) +
geom_raster(interpolate = TRUE) +
geom_contour(aes(z = density), breaks = seq(0, 24, 3),  alpha = 0.35, size = 0.5) +
scale_fill_continuous_sequential(palette = "Blues 3", rev = TRUE) +
labs(
x = bquote("Effect Size" ~ theta),
y = bquote("Weight Parameter" ~ omega),
fill = "Posterior \n Density"
) +
guides(fill = guide_colorbar(barheight = 20, barwidth = 1.3, title.position = "top")) +
scale_x_continuous(limits=c(-0.5, 0.6), expand = c(0.04, 0.005)) +
scale_y_continuous(limits=c(0, 1), expand = c(0.005, 0.005)) +
theme_bw() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.text.x = element_text(size = 18),
legend.position = "right",
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 16),
axis.title.x = element_text(size = 22),
legend.title=element_text(size=16),
legend.text = element_text(size = 16),
legend.key.size = unit(10, 'cm'))
print(plot_joint)
joint_plot_df <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pp_joint_post <- postPP(theta = par_grid$theta, alpha = par_grid$alpha, tr = tr[i],
sr = sr[i], to = to, so = so, x = x, y = y, m = m, v = v)
par_grid$density <- pp_joint_post
par_grid$tr <- tr[i]
par_grid$sr <- sr[i]
par_grid$rnumber <- rnumber[i]
return(par_grid)
}))
#   ____________________________________________________________________________
#   Libraries                                                               ####
library(ppRep)
library(ggplot2)
library(colorspace)
library(xtable)
library(dplyr)
library(hypergeo)
library(ggpubr)
#   ____________________________________________________________________________
#   Parameter Setting                                                       ####
# Original and Replicated Studies
load("credentials_data.RData")
to <- data %>%
dplyr::filter(type == "original") %>%
dplyr::pull(fis) %>%
as.numeric()
so <- data %>%
dplyr::filter(site == "original") %>%
dplyr::pull(se_fis) %>%
as.numeric()
trep <- data %>%
dplyr::filter(site %in% c("University of Toronto", "Montana State University", "Ashland University")) %>%
dplyr::pull(fis) %>%
as.numeric()
srep <- data %>%
dplyr::filter(site %in% c("University of Toronto", "Montana State University", "Ashland University")) %>%
dplyr::pull(se_fis) %>%
as.numeric()
tp <- round(sum(trep/srep^2)/sum(1/srep^2),2)
sp <- round(sqrt(1/sum(1/srep^2)),2)
tr <- c(trep,tp)
sr <- c(srep,sp)
rnumber <- c(1, 2, 3, 4)
# Uniform prior for alpha
x <- 1
y <- 1
# Parameter grid to compute posterior density
n_alpha <- 400
n_theta <- 400
alphaseq <- seq(0, 1, length.out = n_alpha)
thetaseq <- seq(-0.9, 0.9, length.out = n_theta)
par_grid <- expand.grid(alpha = alphaseq, theta = thetaseq)
m <- 0
v <- Inf
#   ____________________________________________________________________________
#   Joint Posterior                                                         ####
joint_plot_df <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pp_joint_post <- postPP(theta = par_grid$theta, alpha = par_grid$alpha, tr = tr[i],
sr = sr[i], to = to, so = so, x = x, y = y, m = m, v = v)
par_grid$density <- pp_joint_post
par_grid$tr <- tr[i]
par_grid$sr <- sr[i]
par_grid$rnumber <- rnumber[i]
return(par_grid)
}))
# Create a new column for ordering
joint_plot_df$rep_order <- ifelse(joint_plot_df$rnumber == 4, "p", as.character(joint_plot_df$rnumber))
# Create the original rep_setting column with proper labels
joint_plot_df$rep_setting <- paste0(
"{hat(theta)[r*",
ifelse(joint_plot_df$rnumber == 4, "p", joint_plot_df$rnumber),
"] == ",
round(joint_plot_df$tr, 2),
"}*',' ~ sigma[r*",
ifelse(joint_plot_df$rnumber == 4, "p", joint_plot_df$rnumber),
"] == ",
round(joint_plot_df$sr, 2)
)
# Convert the new rep_order column to a factor to specify the order
joint_plot_df$rep_order <- factor(joint_plot_df$rep_order, levels = c("1", "2", "3", "p"))
# Plot of joint posterior
pp_plot_joint <- ggplot(data = joint_plot_df, aes(x = theta, y = alpha, fill = density)) +
facet_wrap(~ rep_setting,
labeller = label_parsed, ncol = 4) +
geom_raster(interpolate = TRUE) +
geom_contour(aes(z = density), breaks = seq(0, 30, 5), alpha = 0.25, col = 1,
linewidth = 0.3) +
scale_fill_continuous_sequential(palette = "Blues 3", rev = TRUE) +
labs(x = bquote("Effect size" ~ theta),
y = bquote("Power parameter" ~ alpha),
fill = "Posterior \ndensity") +
guides(fill = guide_colorbar(barheight = 10, barwidth = 0.5)) +
theme_bw() +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
panel.grid.major.x = element_blank(),
panel.grid.minor.x = element_blank(),
strip.text.x = element_text(size = 18),
legend.position = "right",
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 16),
axis.title.x = element_text(size = 22),
legend.title=element_text(size=16),
legend.text = element_text(size = 16),
legend.key.size = unit(10, 'cm'))
pp_plot_joint
# Marginal posterior of alpha
marg_alpha_dens <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pp_joint_post <- postPPalpha(alpha = alphaseq, tr = tr[i], sr = sr[i], to = to,
so = so, x = x, y = y, m = m, v = v)
out <- data.frame(x = alphaseq, density = pp_joint_post, rnumber = rnumber[i],
parameter = "'Power parameter' ~ alpha", tr = tr[i], sr = sr[i])
return(out)
}))
# Marginal posterior of theta
marg_theta_dens <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pp_joint_post <- postPPtheta(theta = thetaseq, tr = tr[i], sr = sr[i], to = to,
so = so, x = x, y = y, m = m, v = v)
out <- data.frame(x = thetaseq, density = pp_joint_post, rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i], sr = sr[i])
return(out)
}))
# Both marginal distributions
marg_plot_df <- rbind(marg_alpha_dens, marg_theta_dens)
marg_plot_df$rep_setting <- paste0("{hat(theta)[italic('r')*", marg_plot_df$rnumber,
"] == ", round(marg_plot_df$tr, 2),
"}*',' ~ sigma[italic('r')*", marg_plot_df$rnumber,
"] == ", round(marg_plot_df$sr, 2))
#   ____________________________________________________________________________
#   Marginal Posteriors                                                     ####
# Marginal posterior of alpha
marg_alpha_dens <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pp_joint_post <- postPPalpha(alpha = alphaseq, tr = tr[i], sr = sr[i], to = to,
so = so, x = x, y = y, m = m, v = v)
out <- data.frame(x = alphaseq, density = pp_joint_post, rnumber = rnumber[i],
parameter = "'Power parameter' ~ alpha", tr = tr[i], sr = sr[i])
return(out)
}))
# Marginal posterior of theta
marg_theta_dens <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pp_joint_post <- postPPtheta(theta = thetaseq, tr = tr[i], sr = sr[i], to = to,
so = so, x = x, y = y, m = m, v = v)
out <- data.frame(x = thetaseq, density = pp_joint_post, rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i], sr = sr[i])
return(out)
}))
# Both marginal distributions
marg_plot_df <- rbind(marg_alpha_dens, marg_theta_dens)
# Create a new column for ordering
marg_plot_df$rep_order <- ifelse(marg_plot_df$rnumber == 4, "p", as.character(marg_plot_df$rnumber))
# Create the original rep_setting column with proper labels
marg_plot_df$rep_setting <- paste0(
"{hat(theta)[r*",
ifelse(marg_plot_df$rnumber == 4, "p", marg_plot_df$rnumber),
"] == ",
round(marg_plot_df$tr, 2),
"}*',' ~ sigma[r*",
ifelse(marg_plot_df$rnumber == 4, "p", marg_plot_df$rnumber),
"] == ",
round(marg_plot_df$sr, 2)
)
# Posterior of effect size without using original data
marg_theta_dens2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pp_joint_post <- dnorm(x = thetaseq, mean = tr[i], sd = sr[i])
out <- data.frame(x = thetaseq, density = pp_joint_post, rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i], sr = sr[i])
return(out)
}))
marg_theta_dens2$rep_setting <- paste0("{hat(theta)[italic('r')*", marg_theta_dens2$rnumber,
"] == ", round(marg_theta_dens2$tr, 2),
"}*',' ~ sigma[italic('r')*",
marg_theta_dens2$rnumber, "] == ",
round(marg_theta_dens2$sr, 2))
# Posterior of effect size without using original data
marg_theta_dens2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pp_joint_post <- dnorm(x = thetaseq, mean = tr[i], sd = sr[i])
out <- data.frame(x = thetaseq, density = pp_joint_post, rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i], sr = sr[i])
return(out)
}))
# Create a new column for ordering
marg_theta_dens2$rep_order <- ifelse(marg_theta_dens2$rnumber == 4, "p", as.character(marg_theta_dens2$rnumber))
# Create the original rep_setting column with proper labels
marg_theta_dens2$rep_setting <- paste0(
"{hat(theta)[r*",
ifelse(marg_theta_dens2$rnumber == 4, "p", marg_theta_dens2$rnumber),
"] == ",
round(marg_theta_dens2$tr, 2),
"}*',' ~ sigma[r*",
ifelse(marg_theta_dens2$rnumber == 4, "p", marg_theta_dens2$rnumber),
"] == ",
round(marg_theta_dens2$sr, 2)
)
# 95% HPDI
HPDI_alpha <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- postPPalphaHPD(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = x, y = y, m = m, v = v)
out <- data.frame(y = max(marg_alpha_dens$density)*(1 + 0.05*i),
lower = hpd[1], upper = hpd[2], rnumber = rnumber[i],
parameter = "'Power parameter' ~ alpha", tr = tr[i],
sr = sr[i], height = 0.2)
return(out)
}))
HPDI_theta <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- postPPthetaHPD(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = x, y = y, m = m, v = v)
out <- data.frame(y = max(c(marg_theta_dens2$density, marg_theta_dens$density))*(1 + 0.06*i),
lower = hpd[1], upper = hpd[2], rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
HPDI_df <- rbind(HPDI_alpha, HPDI_theta)
HPDI_df$rep_setting <- paste0("{hat(theta)[italic('r')*", HPDI_df$rnumber, "] == ",
round(HPDI_df$tr, 2), "}*',' ~ sigma[italic('r')*",
HPDI_df$rnumber, "] == ", round(HPDI_df$sr, 2))
HPDI_theta_2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- tr[i] + c(-1, 1)*qnorm(p = 0.975)*sr[i]
out <- data.frame(y = max(c(marg_theta_dens2$density, marg_theta_dens$density))*(1 + 0.05*i),
lower = hpd[1], upper = hpd[2], rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
HPDI_theta_2$rep_setting <- paste0("{hat(theta)[italic('r')*", HPDI_theta_2$rnumber, "] == ",
round(HPDI_theta_2$tr, 2), "}*',' ~ sigma[italic('r')*",
HPDI_theta_2$rnumber, "] == ", round(HPDI_theta_2$sr, 2))
## Limitting density for perfectly agreeing effect estimates with c = so^2/sr^2 -> infty
alpha_limit_df <- data.frame(x = alphaseq,
density = dbeta(x = alphaseq, x + 0.5, y),
parameter = "'Power parameter' ~ alpha")
## ----"Fig1-posterior-distribution", fig.height = 6----------------------------
## colorblind friendly scale
ncat <- length(unique(marg_plot_df$rep_setting))
colblind <- c("#E69F00", "#009E20", "#0072B2", "#AA4499")
names(colblind) <- unique(marg_plot_df$rep_setting)
colblind <- colblind[order(names(colblind))]
## Plot of marginal posteriors
plot_marg_post_joint <- ggplot() +
geom_errorbarh(data = HPDI_df,
aes(xmin = lower, xmax = upper, y = y*1.05, color = rep_setting,
height = height), alpha = 0.8, size = 1.0) +
geom_errorbarh(data = HPDI_theta_2,
aes(xmin = lower, xmax = upper, y = y*1.05, color = rep_setting,
height = height), alpha = 0.7, linetype = "22", size = 1.0) +
geom_line(data = marg_theta_dens2, aes(x = x, y = density, color = rep_setting),
lty = 2, alpha = 0.5, size = 1.0) +
geom_line(data = marg_plot_df, aes(x = x, y = density, color = rep_setting),
alpha = 0.9, size = 1.0) +
# geom_line(data = alpha_limit_df, aes(x = x, y = density), col = 1, lty = 3, alpha = 0.9, size = 1.0) +
facet_wrap(~ parameter, scales = "free", labeller = label_parsed,
strip.position = "bottom") +
theme_bw() +
labs(x = NULL, y = "Marginal posterior density", color = "") +
scale_color_manual(values = colblind, labels = scales::parse_format()) +
theme(strip.placement = "outside",   # format to look like title
strip.background = element_blank(),
strip.text.x = element_text(size = 18),
legend.position = "top",
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 16),
axis.title.x = element_text(size = 22),
legend.title= element_blank(),
legend.text = element_text(size = 16)) +
guides(color=guide_legend(title="Replicated Experiment"))
plot_marg_post_joint
# 95% HPDI
HPDI_alpha <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- postPPalphaHPD(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = x, y = y, m = m, v = v)
out <- data.frame(y = max(marg_alpha_dens$density)*(1 + 0.05*i),
lower = hpd[1], upper = hpd[2], rnumber = rnumber[i],
parameter = "'Power parameter' ~ alpha", tr = tr[i],
sr = sr[i], height = 0.2)
return(out)
}))
HPDI_theta <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- postPPthetaHPD(level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = x, y = y, m = m, v = v)
out <- data.frame(y = max(c(marg_theta_dens2$density, marg_theta_dens$density))*(1 + 0.06*i),
lower = hpd[1], upper = hpd[2], rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
HPDI_df <- rbind(HPDI_alpha, HPDI_theta)
# Create a new column for ordering
HPDI_df$rep_order <- ifelse(HPDI_df$rnumber == 4, "p", as.character(HPDI_df$rnumber))
# Create the original rep_setting column with proper labels
HPDI_df$rep_setting <- paste0(
"{hat(theta)[r*",
ifelse(HPDI_df$rnumber == 4, "p", HPDI_df$rnumber),
"] == ",
round(HPDI_df$tr, 2),
"}*',' ~ sigma[r*",
ifelse(HPDI_df$rnumber == 4, "p", HPDI_df$rnumber),
"] == ",
round(HPDI_df$sr, 2)
)
HPDI_theta_2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- tr[i] + c(-1, 1)*qnorm(p = 0.975)*sr[i]
out <- data.frame(y = max(c(marg_theta_dens2$density, marg_theta_dens$density))*(1 + 0.05*i),
lower = hpd[1], upper = hpd[2], rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6)
return(out)
}))
# Create a new column for ordering
HPDI_theta_2$rep_order <- ifelse(HPDI_theta_2$rnumber == 4, "p", as.character(HPDI_theta_2$rnumber))
# Create the original rep_setting column with proper labels
HPDI_theta_2$rep_setting <- paste0(
"{hat(theta)[r*",
ifelse(HPDI_theta_2$rnumber == 4, "p", HPDI_theta_2$rnumber),
"] == ",
round(HPDI_theta_2$tr, 2),
"}*',' ~ sigma[r*",
ifelse(HPDI_theta_2$rnumber == 4, "p", HPDI_theta_2$rnumber),
"] == ",
round(HPDI_theta_2$sr, 2)
)
## Limitting density for perfectly agreeing effect estimates with c = so^2/sr^2 -> infty
alpha_limit_df <- data.frame(x = alphaseq,
density = dbeta(x = alphaseq, x + 0.5, y),
parameter = "'Power parameter' ~ alpha")
## ----"Fig1-posterior-distribution", fig.height = 6----------------------------
## colorblind friendly scale
ncat <- length(unique(marg_plot_df$rep_setting))
colblind <- c("#E69F00", "#009E20", "#0072B2", "#AA4499")
names(colblind) <- unique(marg_plot_df$rep_setting)
colblind <- colblind[order(names(colblind))]
## Plot of marginal posteriors
plot_marg_post_joint <- ggplot() +
geom_errorbarh(data = HPDI_df,
aes(xmin = lower, xmax = upper, y = y*1.05, color = rep_setting,
height = height), alpha = 0.8, size = 1.0) +
geom_errorbarh(data = HPDI_theta_2,
aes(xmin = lower, xmax = upper, y = y*1.05, color = rep_setting,
height = height), alpha = 0.7, linetype = "22", size = 1.0) +
geom_line(data = marg_theta_dens2, aes(x = x, y = density, color = rep_setting),
lty = 2, alpha = 0.5, size = 1.0) +
geom_line(data = marg_plot_df, aes(x = x, y = density, color = rep_setting),
alpha = 0.9, size = 1.0) +
# geom_line(data = alpha_limit_df, aes(x = x, y = density), col = 1, lty = 3, alpha = 0.9, size = 1.0) +
facet_wrap(~ parameter, scales = "free", labeller = label_parsed,
strip.position = "bottom") +
theme_bw() +
labs(x = NULL, y = "Marginal posterior density", color = "") +
scale_color_manual(values = colblind, labels = scales::parse_format()) +
theme(strip.placement = "outside",   # format to look like title
strip.background = element_blank(),
strip.text.x = element_text(size = 18),
legend.position = "top",
axis.text.y = element_text(size = 16),
axis.title.y = element_text(size = 22),
axis.text.x = element_text(size = 16),
axis.title.x = element_text(size = 22),
legend.title= element_blank(),
legend.text = element_text(size = 16)) +
guides(color=guide_legend(title="Replicated Experiment"))
plot_marg_post_joint
