geom_line(
data = dens_orig, aes(x = x, y = density, color = factor(prior)),
lty = 1, alpha = 0.9, size = 1.2
) +
facet_wrap(~rnumber,
ncol = 4,
labeller = label_parsed
) +
scale_color_manual(values = c( Hierarchical = "green", Mixture = "dodgerblue", Power = "firebrick", Uniform = "black")) +
labs(
x = expression("Effect Size" ~ theta), y = "Density",
color = "Prior"
) +
theme_bw(base_size = 14) +
theme(
strip.text = element_text(face = "bold"),
legend.position = "top"
)
theta_m_post_hm <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
y_pair <- c(to, tr[index])
sigma_pair <- c(so, sr[index])
# Bayesian two-study "meta-analysis" (replicated and original study)
result_pair <- bayesmeta(
y = y_pair,
sigma = sigma_pair,
labels = c("Original", rep_names[index]),
tau.prior = function(t) dhalfnormal(t, scale = 0.2)  # Half-normal prior for heterogeneity
# tau.prior = function(x){return(dhalfcauchy(x, scale=0.5))}
# tau.prior = function(t) dinvgamma(t, shape =  0.5, rate =  0.5, log = FALSE)  # Inverse gamma prior for heterogeneity
# tau.prior = "Jeffreys"
)
theta_post <- result_pair$dposterior(mu=thetaseq)
out <- data.frame(
x = thetaseq, density = theta_post, rnumber = rnumber[index],
parameter = "'Effect size' ~ theta", tr = tr[index], sr = sr[index]
)
return(out)
}))
HPDI_theta_hm <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(index) {
y_pair <- c(to, tr[index])
sigma_pair <- c(so, sr[index])
# Bayesian two-study "meta-analysis" (replicated and original study)
result_pair <- bayesmeta(
y = y_pair,
sigma = sigma_pair,
labels = c("Original", rep_names[index]),
tau.prior = function(t) dhalfnormal(t, scale = 0.2)  # Half-normal prior for heterogeneity
)
hpd <- result_pair$post.interval(mu.level = 0.95)
out <- data.frame(
y = max(result_pair$dposterior(mu=thetaseq)) * (1 + 0.06 * index),
lower = hpd[[1]], upper = hpd[[2]], rnumber = rnumber[index],
parameter = "'Effect size' ~ theta", tr = tr[index],
sr = sr[index], height = 0.6
)
return(out)
}))
#   ____________________________________________________________________________
#   Plots                                                                   ####
# Densities
mix_theta <- theta_m_post %>% mutate(prior = "Mixture")
hm_theta <- theta_m_post_hm %>% mutate(prior = "Hierarchical")
unif_theta <- theta_m_post_2 %>% mutate(prior = "Uniform")
pp_theta <- marg_theta_dens %>% mutate(prior = "Power")
dens_orig <- bind_rows(mix_theta, pp_theta, hm_theta)
dens_orig$rnumber <- factor(dens_orig$rnumber,
levels = c("1", "2", "3", "4"),
labels = c(
expression(" " ~ hat(theta)[r * 1] == 0.29 ~ ", " ~ sigma[r * 1] == 0.11),
expression(" " ~ hat(theta)[r * 2] == 0.25 ~ ", " ~ sigma[r * 2] == 0.09),
expression(" " ~ hat(theta)[r * 3] == -0.18 ~ ", " ~ sigma[r * 3] == 0.11),
expression(" " ~ hat(theta)[r * p] == 0.14 ~ ", " ~ sigma[r * p] == 0.06)
)
)
unif_theta$rnumber <- factor(unif_theta$rnumber,
levels = c("1", "2", "3", "4"),
labels = c(
expression(" " ~ hat(theta)[r * 1] == 0.29 ~ ", " ~ sigma[r * 1] == 0.11),
expression(" " ~ hat(theta)[r * 2] == 0.25 ~ ", " ~ sigma[r * 2] == 0.09),
expression(" " ~ hat(theta)[r * 3] == -0.18 ~ ", " ~ sigma[r * 3] == 0.11),
expression(" " ~ hat(theta)[r * p] == 0.14 ~ ", " ~ sigma[r * p] == 0.06)
)
)
# HPDIs
HPDI_mix <- HPDI_theta_mix %>% mutate(prior = "Mixture")
HPDI_hm <- HPDI_theta_hm %>% mutate(prior = "Hierarchical")
HPDI_unif <- HPDI_theta_2_mix %>% mutate(prior = "Uniform")
HPDI_pp <- HPDI_theta_pp %>% mutate(prior = "Power")
hpdi_orig <- bind_rows(HPDI_mix, HPDI_pp, HPDI_hm)
hpdi_orig$rnumber <- factor(hpdi_orig$rnumber,
levels = c("1", "2", "3", "4"),
labels = c(
expression(" " ~ hat(theta)[r * 1] == 0.29 ~ ", " ~ sigma[r * 1] == 0.11),
expression(" " ~ hat(theta)[r * 2] == 0.25 ~ ", " ~ sigma[r * 2] == 0.09),
expression(" " ~ hat(theta)[r * 3] == -0.18 ~ ", " ~ sigma[r * 3] == 0.11),
expression(" " ~ hat(theta)[r * p] == 0.14 ~ ", " ~ sigma[r * p] == 0.06)
)
)
HPDI_unif$rnumber <- factor(HPDI_unif$rnumber,
levels = c("1", "2", "3", "4"),
labels = c(
expression(" " ~ hat(theta)[r * 1] == 0.29 ~ ", " ~ sigma[r * 1] == 0.11),
expression(" " ~ hat(theta)[r * 2] == 0.25 ~ ", " ~ sigma[r * 2] == 0.09),
expression(" " ~ hat(theta)[r * 3] == -0.18 ~ ", " ~ sigma[r * 3] == 0.11),
expression(" " ~ hat(theta)[r * p] == 0.14 ~ ", " ~ sigma[r * p] == 0.06)
)
)
ggplot() +
geom_errorbarh(
data = hpdi_orig,
aes(
xmin = lower, xmax = upper, y = y * 1.05, color = factor(prior),
height = height
), alpha = 0.8, size = 1.0
) +
geom_errorbarh(
data = HPDI_unif,
aes(
xmin = lower, xmax = upper, y = y * 1.20, color = factor(prior),
height = height
), alpha = 0.7, linetype = "22", size = 1.0
) +
geom_line(
data = unif_theta, aes(x = x, y = density, color = factor(prior)),
lty = 22, alpha = 0.9, size = 1.2
) +
geom_line(
data = dens_orig, aes(x = x, y = density, color = factor(prior)),
lty = 1, alpha = 0.9, size = 1.2
) +
facet_wrap(~rnumber,
ncol = 4,
labeller = label_parsed
) +
scale_color_manual(values = c( Hierarchical = "green", Mixture = "dodgerblue", Power = "firebrick", Uniform = "black")) +
labs(
x = expression("Effect Size" ~ theta), y = "Density",
color = "Prior"
) +
theme_bw(base_size = 14) +
theme(
strip.text = element_text(face = "bold"),
legend.position = "top"
)
#   ____________________________________________________________________________
#   Libraries                                                               ####
library(dplyr)
library(knitr)
library(xtable)
library(repmix)
library(hypergeo)
library(ppRep)
source("Scripts/Mixture_Priors/RepMixFun_BF.R")
#   ____________________________________________________________________________
#   Random Weights                                                          ####
load("credentials_data.RData")
##  ............................................................................
##  Parameter Setting                                                       ####
# Original and Replicated Studies
to <- data %>%
dplyr::filter(type == "original") %>%
dplyr::pull(fis) %>%
as.numeric()
so <- data %>%
dplyr::filter(site == "original") %>%
dplyr::pull(se_fis) %>%
as.numeric()
trep <- data %>%
dplyr::filter(site %in% c("University of Toronto", "Montana State University", "Ashland University")) %>%
dplyr::pull(fis) %>%
as.numeric()
srep <- data %>%
dplyr::filter(site %in% c("University of Toronto", "Montana State University", "Ashland University")) %>%
dplyr::pull(se_fis) %>%
as.numeric()
tp <- round(sum(trep / srep^2) / sum(1 / srep^2), 2)
sp <- round(sqrt(1 / sum(1 / srep^2)), 2)
tr <- c(trep, tp)
sr <- c(srep, sp)
### . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ..
### Mixture Prior                                                           ####
# Mean and Variance Unit Informative Prior
mu_UIP <- 0
tau_UIP <- 2
# Parameter Grid
n_weights <- 400
n_theta <- 400
wseq <- seq(0, 1, length.out = n_weights)
thetaseq <- seq(-0.9, 0.9, length.out = n_theta)
par_grid <- expand.grid(omega = wseq, theta = thetaseq)
# Uniform Prior for the Weight
eta <- 1
nu <- 1
### . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ..
### Power Prior                                                             ####
# Uniform prior for alpha
x <- 1
y <- 1
# Parameter grid to compute posterior density
n_alpha <- 400
n_theta <- 400
alphaseq <- seq(0, 1, length.out = n_alpha)
thetaseq <- seq(-0.9, 0.9, length.out = n_theta)
par_grid <- expand.grid(alpha = alphaseq, theta = thetaseq)
m <- 0
v <- Inf
# Replication Number
rnumber <- c(1, 2, 3, 4)
#   ____________________________________________________________________________
#   Mixture Prior Analysis                                                  ####
##  ............................................................................
##  Theta Marginal Posterior                                                ####
theta_m_post <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
marg_p_dens <- thetaposteriormix(
theta = thetaseq,
tr = tr[index],
sr = sr[index],
to = to,
so = so,
x = eta,
y = nu,
m = mu_UIP,
v = tau_UIP
)
out <- data.frame(
x = thetaseq, density = marg_p_dens, rnumber = rnumber[index],
parameter = "'Effect size' ~ theta", tr = tr[index], sr = sr[index]
)
return(out)
}))
## Posterior of effect size without using original data
theta_m_post_2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pDens <- dnorm(x = thetaseq, mean = tr[i], sd = sr[i])
out <- data.frame(
x = thetaseq, density = pDens, rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i], sr = sr[i]
)
return(out)
}))
### . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ..
### Credibility Intervals                                                   ####
HPDI_theta_mix <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- thetaHPD(
level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, m = mu_UIP, v = tau_UIP, x = eta, y = nu
)
out <- data.frame(
y = 10.5,
lower = hpd[1], upper = hpd[3], rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6
)
return(out)
}))
HPDI_theta_2_mix <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- tr[i] + c(-1, 1) * qnorm(p = 0.975) * sr[i]
out <- data.frame(
y = 10,
lower = hpd[1], upper = hpd[2], rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6
)
return(out)
}))
HPDI_theta_2_mix$trFormat <- paste0(
"{hat(theta)[italic('r')*", HPDI_theta_2_mix$rnumber, "] == ",
round(HPDI_theta_2_mix$tr, 2), "}*',' ~ sigma[italic('r')*",
HPDI_theta_2_mix$rnumber, "] == ", round(HPDI_theta_2_mix$sr, 2)
)
#   ____________________________________________________________________________
#   Power Prior Analysis                                                    ####
# Marginal posterior of theta
marg_theta_dens <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pp_joint_post <- postPPtheta(
theta = thetaseq, tr = tr[i], sr = sr[i], to = to,
so = so, x = x, y = y, m = m, v = v
)
out <- data.frame(
x = thetaseq, density = pp_joint_post, rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i], sr = sr[i]
)
return(out)
}))
# Create a new column for ordering
marg_theta_dens$rep_order <- ifelse(marg_theta_dens$rnumber == 4, "p", as.character(marg_theta_dens$rnumber))
# Create the original rep_setting column with proper labels
marg_theta_dens$rep_setting <- paste0(
"{hat(theta)[r*",
ifelse(marg_theta_dens$rnumber == 4, "p", marg_theta_dens$rnumber),
"] == ",
round(marg_theta_dens$tr, 2),
"}*',' ~ sigma[r*",
ifelse(marg_theta_dens$rnumber == 4, "p", marg_theta_dens$rnumber),
"] == ",
round(marg_theta_dens$sr, 2)
)
# Posterior of effect size without using original data
marg_theta_dens2 <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
pp_joint_post <- dnorm(x = thetaseq, mean = tr[i], sd = sr[i])
out <- data.frame(
x = thetaseq, density = pp_joint_post, rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i], sr = sr[i]
)
return(out)
}))
# Create a new column for ordering
marg_theta_dens2$rep_order <- ifelse(marg_theta_dens2$rnumber == 4, "p", as.character(marg_theta_dens2$rnumber))
# Create the original rep_setting column with proper labels
marg_theta_dens2$rep_setting <- paste0(
"{hat(theta)[r*",
ifelse(marg_theta_dens2$rnumber == 4, "p", marg_theta_dens2$rnumber),
"] == ",
round(marg_theta_dens2$tr, 2),
"}*',' ~ sigma[r*",
ifelse(marg_theta_dens2$rnumber == 4, "p", marg_theta_dens2$rnumber),
"] == ",
round(marg_theta_dens2$sr, 2)
)
# 95% HPDI
HPDI_theta_pp <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(i) {
hpd <- postPPthetaHPD(
level = 0.95, tr = tr[i], sr = sr[i], to = to,
so = so, x = x, y = y, m = m, v = v
)
out <- data.frame(
y = 11,
lower = hpd[1], upper = hpd[2], rnumber = rnumber[i],
parameter = "'Effect size' ~ theta", tr = tr[i],
sr = sr[i], height = 0.6
)
return(out)
}))
# Create a new column for ordering
HPDI_theta_pp$rep_order <- ifelse(HPDI_theta_pp$rnumber == 4, "p", as.character(HPDI_theta_pp$rnumber))
# Create the original rep_setting column with proper labels
HPDI_theta_pp$rep_setting <- paste0(
"{hat(theta)[r*",
ifelse(HPDI_theta_pp$rnumber == 4, "p", HPDI_theta_pp$rnumber),
"] == ",
round(HPDI_theta_pp$tr, 2),
"}*',' ~ sigma[r*",
ifelse(HPDI_theta_pp$rnumber == 4, "p", HPDI_theta_pp$rnumber),
"] == ",
round(HPDI_theta_pp$sr, 2)
)
#   ____________________________________________________________________________
#   Hierarchical models                                                     ####
# Define labels for the replication sites
rep_names <- c("University of Toronto", "Montana State University", "Ashland University", "Pooled")
theta_m_post_hm <- do.call("rbind", lapply(X = seq(1:length(tr)), FUN = function(index) {
y_pair <- c(to, tr[index])
sigma_pair <- c(so, sr[index])
# Bayesian two-study "meta-analysis" (replicated and original study)
result_pair <- bayesmeta(
y = y_pair,
sigma = sigma_pair,
labels = c("Original", rep_names[index]),
tau.prior = function(t) dhalfnormal(t, scale = 0.2)  # Half-normal prior for heterogeneity
# tau.prior = function(x){return(dhalfcauchy(x, scale=0.5))}
# tau.prior = function(t) dinvgamma(t, shape =  0.5, rate =  0.5, log = FALSE)  # Inverse gamma prior for heterogeneity
# tau.prior = "Jeffreys"
)
theta_post <- result_pair$dposterior(mu=thetaseq)
out <- data.frame(
x = thetaseq, density = theta_post, rnumber = rnumber[index],
parameter = "'Effect size' ~ theta", tr = tr[index], sr = sr[index]
)
return(out)
}))
HPDI_theta_hm <- do.call("rbind", lapply(X = seq(1, length(tr)), FUN = function(index) {
y_pair <- c(to, tr[index])
sigma_pair <- c(so, sr[index])
# Bayesian two-study "meta-analysis" (replicated and original study)
result_pair <- bayesmeta(
y = y_pair,
sigma = sigma_pair,
labels = c("Original", rep_names[index]),
tau.prior = function(t) dhalfnormal(t, scale = 0.2)  # Half-normal prior for heterogeneity
)
hpd <- result_pair$post.interval(mu.level = 0.95)
out <- data.frame(
y = 11.5,
lower = hpd[[1]], upper = hpd[[2]], rnumber = rnumber[index],
parameter = "'Effect size' ~ theta", tr = tr[index],
sr = sr[index], height = 0.6
)
return(out)
}))
#   ____________________________________________________________________________
#   Plots                                                                   ####
# Densities
mix_theta <- theta_m_post %>% mutate(prior = "Mixture")
hm_theta <- theta_m_post_hm %>% mutate(prior = "Hierarchical")
unif_theta <- theta_m_post_2 %>% mutate(prior = "Uniform")
pp_theta <- marg_theta_dens %>% mutate(prior = "Power")
dens_orig <- bind_rows(mix_theta, pp_theta, hm_theta)
dens_orig$rnumber <- factor(dens_orig$rnumber,
levels = c("1", "2", "3", "4"),
labels = c(
expression(" " ~ hat(theta)[r * 1] == 0.29 ~ ", " ~ sigma[r * 1] == 0.11),
expression(" " ~ hat(theta)[r * 2] == 0.25 ~ ", " ~ sigma[r * 2] == 0.09),
expression(" " ~ hat(theta)[r * 3] == -0.18 ~ ", " ~ sigma[r * 3] == 0.11),
expression(" " ~ hat(theta)[r * p] == 0.14 ~ ", " ~ sigma[r * p] == 0.06)
)
)
unif_theta$rnumber <- factor(unif_theta$rnumber,
levels = c("1", "2", "3", "4"),
labels = c(
expression(" " ~ hat(theta)[r * 1] == 0.29 ~ ", " ~ sigma[r * 1] == 0.11),
expression(" " ~ hat(theta)[r * 2] == 0.25 ~ ", " ~ sigma[r * 2] == 0.09),
expression(" " ~ hat(theta)[r * 3] == -0.18 ~ ", " ~ sigma[r * 3] == 0.11),
expression(" " ~ hat(theta)[r * p] == 0.14 ~ ", " ~ sigma[r * p] == 0.06)
)
)
# HPDIs
HPDI_mix <- HPDI_theta_mix %>% mutate(prior = "Mixture")
HPDI_hm <- HPDI_theta_hm %>% mutate(prior = "Hierarchical")
HPDI_unif <- HPDI_theta_2_mix %>% mutate(prior = "Uniform")
HPDI_pp <- HPDI_theta_pp %>% mutate(prior = "Power")
hpdi_orig <- bind_rows(HPDI_mix, HPDI_pp, HPDI_hm)
hpdi_orig$rnumber <- factor(hpdi_orig$rnumber,
levels = c("1", "2", "3", "4"),
labels = c(
expression(" " ~ hat(theta)[r * 1] == 0.29 ~ ", " ~ sigma[r * 1] == 0.11),
expression(" " ~ hat(theta)[r * 2] == 0.25 ~ ", " ~ sigma[r * 2] == 0.09),
expression(" " ~ hat(theta)[r * 3] == -0.18 ~ ", " ~ sigma[r * 3] == 0.11),
expression(" " ~ hat(theta)[r * p] == 0.14 ~ ", " ~ sigma[r * p] == 0.06)
)
)
HPDI_unif$rnumber <- factor(HPDI_unif$rnumber,
levels = c("1", "2", "3", "4"),
labels = c(
expression(" " ~ hat(theta)[r * 1] == 0.29 ~ ", " ~ sigma[r * 1] == 0.11),
expression(" " ~ hat(theta)[r * 2] == 0.25 ~ ", " ~ sigma[r * 2] == 0.09),
expression(" " ~ hat(theta)[r * 3] == -0.18 ~ ", " ~ sigma[r * 3] == 0.11),
expression(" " ~ hat(theta)[r * p] == 0.14 ~ ", " ~ sigma[r * p] == 0.06)
)
)
ggplot() +
geom_errorbarh(
data = hpdi_orig,
aes(
xmin = lower, xmax = upper, y = y * 1.05, color = factor(prior),
height = height
), alpha = 0.8, size = 1.0
) +
geom_errorbarh(
data = HPDI_unif,
aes(
xmin = lower, xmax = upper, y = y * 1.20, color = factor(prior),
height = height
), alpha = 0.7, linetype = "22", size = 1.0
) +
geom_line(
data = unif_theta, aes(x = x, y = density, color = factor(prior)),
lty = 22, alpha = 0.9, size = 1.2
) +
geom_line(
data = dens_orig, aes(x = x, y = density, color = factor(prior)),
lty = 1, alpha = 0.9, size = 1.2
) +
facet_wrap(~rnumber,
ncol = 4,
labeller = label_parsed
) +
scale_color_manual(values = c( Hierarchical = "green", Mixture = "dodgerblue", Power = "firebrick", Uniform = "black")) +
labs(
x = expression("Effect Size" ~ theta), y = "Density",
color = "Prior"
) +
theme_bw(base_size = 14) +
theme(
strip.text = element_text(face = "bold"),
legend.position = "top"
)
ggplot() +
geom_errorbarh(
data = hpdi_orig,
aes(
xmin = lower, xmax = upper, y = y , color = factor(prior),
height = height
), alpha = 0.8, size = 1.0
) +
geom_errorbarh(
data = HPDI_unif,
aes(
xmin = lower, xmax = upper, y = y, color = factor(prior),
height = height
), alpha = 0.7, linetype = "22", size = 1.0
) +
geom_line(
data = unif_theta, aes(x = x, y = density, color = factor(prior)),
lty = 22, alpha = 0.9, size = 1.2
) +
geom_line(
data = dens_orig, aes(x = x, y = density, color = factor(prior)),
lty = 1, alpha = 0.9, size = 1.2
) +
facet_wrap(~rnumber,
ncol = 4,
labeller = label_parsed
) +
scale_color_manual(values = c( Hierarchical = "green", Mixture = "dodgerblue", Power = "firebrick", Uniform = "black")) +
labs(
x = expression("Effect Size" ~ theta), y = "Density",
color = "Prior"
) +
theme_bw(base_size = 14) +
theme(
strip.text = element_text(face = "bold"),
legend.position = "top"
)
